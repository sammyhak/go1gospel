{"version":3,"sources":["webpack:///src/app/uploading/track-upload-header/track-upload-header.component.html","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.ts","webpack:///src/app/uploading/track-form/album-control/album-control.component.html","webpack:///src/app/uploading/track-form/album-control/album-control.component.ts","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.html","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.ts","webpack:///src/app/uploading/track-form/track-form.component.html","webpack:///src/app/uploading/track-form/track-form.component.ts","webpack:///src/common/core/utils/scroll-invalid-input-into-view.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///src/app/web-player/audio-upload-validator.ts","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-upload-validator.ts","webpack:///src/app/admin/tracks/crupdate-track-page/crupdate-track-page.component.ts","webpack:///src/app/admin/tracks/crupdate-track-page/crupdate-track-page.component.html","webpack:///src/common/uploads/directives/upload-button.directive.ts","webpack:///src/common/core/ui/chips/chip-input/chip-input.component.ts","webpack:///src/common/core/ui/chips/chip-input/chip-input.component.html","webpack:///src/common/guards/pending-changes/pending-changes-guard.service.ts","webpack:///src/app/admin/albums/crupdate-album-page/crupdate-album-page.component.ts","webpack:///src/app/admin/albums/crupdate-album-page/crupdate-album-page.component.html","webpack:///src/common/uploads/types/upload-uri.enum.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.ts","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.html","webpack:///src/app/uploading/album-form/album-artist-control/album-artist-control.component.html","webpack:///src/app/uploading/album-form/album-artist-control/album-artist-control.component.ts","webpack:///src/app/uploading/album-form/album-form.component.html","webpack:///src/app/uploading/album-form/album-form.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.html","webpack:///src/app/uploading/uploading-routing.module.ts","webpack:///src/app/uploading/uploading-host/uploading-host.component.ts","webpack:///src/app/uploading/uploading-host/uploading-host.component.html","webpack:///src/app/uploading/uploading.module.ts","webpack:///src/common/uploads/utils/read-uploaded-folders.ts","webpack:///src/common/uploads/directives/upload-dropzone.directive.ts","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.html","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.ts","webpack:///src/app/uploading/upload-page/upload-page.component.html","webpack:///src/app/uploading/upload-page/upload-page.component.ts"],"names":["upload","TrackUploadHeaderComponent","cd","this","subscription","unsubscribe","progress$","pipe","throttleTime","animationFrame","a","leading","trailing","subscribe","progress","detectChanges","AlbumControlComponent","search","searchFormControl","loading$","BehaviorSubject","results$","selectedAlbum$","searchedOnce","bindToSearchControl","value","next","fn","propagateChange","valueChanges","debounceTime","distinctUntilChanged","switchMap","query","searchAlbums","catchError","of","albums","media","forceLocal","limit","modelTypes","finalize","map","response","results","clearSearchInput","album","setValue","provide","useExisting","multi","onMenuOpened","onMenuClosed","$event","stopPropagation","selectAlbum","TrackArtistControlComponent","searchUsers","searchControl","value$","bindSearchControl","artist","newArtists","filter","id","searchResults$","findMatches","artists","_","selectArtist","TrackFormComponent","fb","currentUser","tracks","toast","modal","audioValidator","uploadQueue","waveGenerator","router","settings","autoMatch","canceled","saved","errors$","defaultImage$","uniqueId","form","group","name","image","description","number","tags","genres","duration","url","youtube_id","spotify_popularity","waveData","lyrics","expanded","suggestTagFn","tag","suggestGenreFn","genre","changes","currentValue","patchValue","albumForm","track","formValue","t","display_name","uploadQueueItem","uploadedResponse$","patchFormUsingFileUpload","get","customData","payload","length","artist_type","completed","getPayload","update","create","remove","open","markAsPristine","emit","errResponse","errors","show","title","body","ok","beforeClosed","confirmed","delete","params","uri","validator","httpParams","diskPrefix","disk","willProcessFiles","types","audio","video","then","uploadedFiles","start","queueItem","find","queueItemId","generate","uploadedFile","native","finishProcessing","uploads$","markForCheck","values","metadata","fileEntry","comment","release_date","indexOf","trackUrl","bodyExpansion","scrollInvalidInputIntoView","prefix","firstKey","Object","keys","node","document","getElementById","scrollIntoView","behavior","block","inline","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","MatSlideToggle","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","super","_onChange","_onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","c","monitor","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","stopMonitoring","event","_emitChangeEvent","isDisabled","disabled","options","focusVia","ɵfac","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","inputs","disableRipple","color","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","_onChangeEvent","_onInputClick","_onLabelTextChange","_r0","_r4","inputId","textContent","trim","toString","directives","styles","encapsulation","changeDetection","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","AudioUploadValidator","DEFAULT_MAX_SIZE_MB","showToast","validations","maxSize","getMaxFileSize","i18n","push","nextId","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","_multi","_openCloseAll","complete","ɵdir","nextId$1","CdkAccordionItem","accordion","_expansionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","notify","useValue","undefined","CdkAccordionModule","MatExpansionPanel_ng_template_5_Template","MatExpansionPanelHeader_span_4_Template","ctx_r0","_getExpandedState","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","transform","height","visibility","MatExpansionPanelContent","_template","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","x","y","fromState","toState","hideToggle","_togglePosition","togglePosition","displayMode","_lazyContent","startWith","_portal","take","ngOnDestroy","_body","focusedElement","activeElement","bodyElement","contains","contentQueries","dirIndex","_hasSpacing","data","animation","MatExpansionPanelActionRow","MatExpansionPanelHeader","panel","_element","_parentChangeSubscription","accordionHideToggleChange","merge","_containsFocus","expandedHeight","collapsedHeight","toggle","isExpanded","_isExpanded","keyCode","preventDefault","_toggle","_handleHeaderKeydown","origin","_handleHeaderFocus","_keydown","_getPanelId","_getHeaderHeight","_getTogglePosition","_showToggle","MatExpansionPanelTitle","MatAccordion","arguments","_ownHeaders","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","manager","setFirstItemActive","setLastItemActive","onKeydown","updateActiveItem","ɵMatAccordion_BaseFactory","MatExpansionModule","AppearanceImageUploadValidator","CrupdateTrackPageComponent","route","api","insideAdmin","navigate","trackForm","dirty","includes","toTracksPage","UploadButtonDirective","el","config","filesSelected","addEventListener","e","files","ChipInputComponent","selectMode","formControl","items$","suggestedValues$","suggestFn","index","items","splice","propagate","matAutocomplete","isOpen","add","duplicate","findValueIndex","inputEl","findIndex","v","forEach","item","filtered","addFromAutocomplete","PendingChangesGuard","component","canDeactivate","CrupdateAlbumPageComponent","toAlbumsPage","UploadUri","Image","defaultThrottleConfig","scheduler","lift","ThrottleTimeOperator","subscriber","Subscriber","destination","_hasTrailingValue","_trailingValue","throttled","schedule","dispatchNext","arg","clearThrottle","UploadImageControlComponent","imageValidator","uploadsApi","http","fileDeleted","buttonText","compact","uploadInputConfig","multiple","src$","uploadConfig","defaultUploadConfig","paths","deleteForever","menuTrigger","toggleMenu","uploadImage","AlbumArtistControlComponent","artists$","selectedArtist$","searchArtists","users","AlbumFormComponent","uploadButtonConfig","hideArtistControl","confirmCancel","allTracks$","Date","toISOString","slice","trackByFn","i","onlyValidUploads","uploadsAdded$","uploads","g","error$","sortedTracks","previousIndex","currentIndex","trackForms","some","f","isUploading","artist_id","model_type","newTracks","submit","uploadFiles","maybeCancel","reorderTracks","UploadProgressBarComponent","hidden","totalProgress","count$","pending","routes","path","UploadingHostComponent","children","permissions","simplified","UploadingRoutingModule","forChild","UploadingModule","readDirRecursive","entry","entries","dir","createReader","readEntries","key","childEntry","isDirectory","transformFileEntry","file","fullPath","UploadDropzoneDirective","disableDropzoneClick","disableDropzone","filesDropped","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","clickButton","handleClick","removeClassesFromDropzone","emitUploadEvent","dropzoneDisabled","classList","dataTransfer","dropEffect","newEl","elementFromPoint","clientX","clientY","Array","from","kind","webkitGetAsEntry","concat","hasFiles","toLowerCase","UploadedMediaPreviewComponent","urls","setTimeout","trackLinkInput","select","isTrack","routerLinkToUrl","mediaLink","network","mediaUrl","shareUsing","target","createAlbum$","UploadPageComponent","savedMedia$","autoCreateArtists","newMedia","uploadTracks"],"mappings":"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","file":"x","sourcesContent":["<div class=\"meta\">\n    <div class=\"name\">{{upload.uploadedFile.name}}</div>\n    <div class=\"time-left\" *ngIf=\"(progress.percentage && progress.percentage < 100) && !upload.error$.value\">\n        {{progress.eta}}\n        <span trans>left</span>\n    </div>\n    <div class=\"actions\">\n        <mat-icon\n                class=\"error-icon action-icon\"\n                svgIcon=\"error-outline\"\n                *ngIf=\"upload.error$ | async as error; else noError\"\n                [matTooltip]=\"error | trans\"\n                matTooltipPosition=\"left\"\n        ></mat-icon>\n        <ng-template #noError>\n            <span *ngIf=\"upload.completed\" trans>Upload complete.</span>\n            <span *ngIf=\"upload.processing$ | async\" trans>We are processing your track for playback…</span>\n            <span class=\"cancel-button\" *ngIf=\"!(upload.processing$ | async) && !upload.completed\" (click)=\"upload.cancel()\" trans>Cancel</span>\n        </ng-template>\n    </div>\n</div>\n<mat-progress-bar [mode]=\"(upload.processing$ | async) ? 'indeterminate' : 'determinate'\" color=\"accent\" [value]=\"progress.percentage\"></mat-progress-bar>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {UploadQueueItem, UploadQueueItemProgress} from '@common/uploads/upload-queue/upload-queue-item';\nimport {throttleTime} from 'rxjs/operators';\nimport {animationFrameScheduler, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'track-upload-header',\n    templateUrl: './track-upload-header.component.html',\n    styleUrls: ['./track-upload-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TrackUploadHeaderComponent implements OnChanges, OnDestroy {\n    @Input() upload: UploadQueueItem;\n    private subscription: Subscription;\n    public progress: UploadQueueItemProgress;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n\n    ngOnChanges() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.subscription = this.upload.progress$.pipe(\n            // material progress bar animation lasts 250ms\n            throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}),\n        ).subscribe(progress => {\n            this.progress = progress;\n            this.cd.detectChanges();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","<div class=\"many-inputs\">\r\n    <div class=\"input-container\">\r\n        <div class=\"fake-label\" trans>Album</div>\r\n        <div class=\"fake-input\" tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\r\n            <ng-container *ngIf=\"selectedAlbum$ | async as selectedAlbum; else anyAlbum\">\r\n                <media-image [media]=\"selectedAlbum\"></media-image>\r\n                <div class=\"title-name\">{{selectedAlbum.name}}</div>\r\n            </ng-container>\r\n            <ng-template #anyAlbum>\r\n                <div class=\"title-name\" trans>None</div>\r\n            </ng-template>\r\n            <div class=\"arrow-container\">\r\n                <div class=\"arrow\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"add-album-control-menu\">\r\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"search-input-wrapper\">\r\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\r\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\r\n        </div>\r\n    </div>\r\n    <button mat-menu-item (click)=\"selectAlbum(null)\">\r\n        <media-image default=\"album\"></media-image>\r\n        <div class=\"info any-user-info\">\r\n            <div class=\"name\" trans>No Album</div>\r\n        </div>\r\n    </button>\r\n    <button mat-menu-item *ngFor=\"let album of results$ | async\" (click)=\"selectAlbum(album)\">\r\n        <media-image [media]=\"album\"></media-image>\r\n        <div class=\"user-info\">\r\n            <div class=\"name\">{{album.name}}</div>\r\n            <div class=\"email\">{{album?.artist?.name}}</div>\r\n        </div>\r\n    </button>\r\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(results$ | async).length\" trans>No albums found.</button>\r\n</mat-menu>\r\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, map, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Album, ALBUM_MODEL} from '../../../models/Album';\nimport {Search} from '../../../web-player/search/search.service';\n\n@Component({\n    selector: 'album-control',\n    templateUrl: './album-control.component.html',\n    styleUrls: ['./album-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumControlComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public results$ = new BehaviorSubject<Album[]>([]);\n    public selectedAlbum$ = new BehaviorSubject<Album>(null);\n    private propagateChange: Function;\n    public searchedOnce = false;\n\n    constructor(\n        private search: Search,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Album) {\n        this.selectedAlbum$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchAlbums(query)),\n            catchError(() => of([])),\n        ).subscribe(albums => {\n            this.searchedOnce = true;\n            this.results$.next(albums);\n        });\n    }\n\n    private searchAlbums(query: string): Observable<Album[]> {\n        this.loading$.next(true);\n        return this.search.media(query, {forceLocal: true, limit: 7, modelTypes: [ALBUM_MODEL]})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.results.albums),\n            );\n    }\n\n    public onMenuOpened() {\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectAlbum(album: Album) {\n        this.selectedAlbum$.next(album);\n        this.propagateChange(album);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<div class=\"input-container\">\n    <label [for]=\"id\" trans>Artists</label>\n    <input\n            type=\"text\"\n            [id]=\"id\"\n            [formControl]=\"searchControl\"\n            [matAutocomplete]=\"artistAuto\"\n            placeholder=\"Search artists and users...\"\n            trans-placeholder\n    >\n\n    <mat-chip-list [selectable]=\"false\">\n        <mat-chip class=\"chip-with-image\" *ngFor=\"let artist of value$ | async\" [removable]=\"true\" (removed)=\"deselectArtist(artist)\">\n            <img [src]=\"artist.image\" [alt]=\"artist.name\">\n            {{artist.name}}\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n    <mat-autocomplete #artistAuto=\"matAutocomplete\" class=\"media-autocomplete-panel\" (optionSelected)=\"selectArtist($event.option.value)\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let artist of searchResults$ | async\" [value]=\"artist\">\n            <img [src]=\"artist.image\" [alt]=\"artist.name + ' image'\">\n            <span>{{artist.name}}</span>\n        </mat-option>\n    </mat-autocomplete>\n\n    <div class=\"error\" *ngIf=\"error\">{{error}}</div>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of as observableOf} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {MixedArtist} from '../../../web-player/artists/mixed-artist';\nimport {ARTIST_MODEL} from '../../../models/Artist';\n\n@Component({\n    selector: 'track-artist-control',\n    templateUrl: './track-artist-control.component.html',\n    styleUrls: ['./track-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'custom-control'},\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TrackArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class TrackArtistControlComponent implements OnInit, ControlValueAccessor {\n    @Input() error: string;\n    @Input() searchUsers = false;\n    @Input() id: string;\n\n    public searchControl = new FormControl();\n    public value$ = new BehaviorSubject<MixedArtist[]>([]);\n    public searchResults$: Observable<MixedArtist[]>;\n    private propagateChange: Function;\n\n    constructor(\n        private search: Search,\n    ) {}\n\n    ngOnInit() {\n        this.bindSearchControl();\n    }\n\n    public writeValue(value: MixedArtist[]) {\n        this.value$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public deselectArtist(artist: MixedArtist) {\n        const newArtists = this.value$.value.filter(a => a.id !== artist.id);\n        this.value$.next(newArtists);\n        this.propagateChange(this.value$.value);\n    }\n\n    public selectArtist(artist: MixedArtist) {\n        this.value$.next([...this.value$.value, artist]);\n        this.propagateChange(this.value$.value);\n    }\n\n    private bindSearchControl() {\n        this.searchResults$ = this.searchControl.valueChanges\n            .pipe(\n                distinctUntilChanged(),\n                debounceTime(250),\n                switchMap(query => this.findMatches(query))\n            );\n    }\n\n    public findMatches(query: string): Observable<MixedArtist[]> {\n        if ( ! query || typeof query !== 'string') {\n            return observableOf([]);\n        }\n\n        return this.search.media(query, {limit: 7, forceLocal: true, modelTypes: [ARTIST_MODEL]})\n            .pipe(map(response => response.results.artists));\n    }\n\n    public displayFn(_) {\n        return null;\n    }\n}\n","<form (ngSubmit)=\"submit()\" class=\"many-inputs\" [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <track-upload-header [upload]=\"uploadQueueItem\" *ngIf=\"uploadQueueItem\"></track-upload-header>\n    <div class=\"inline-form\" *ngIf=\"albumForm\" [formGroup]=\"form\">\n        <ng-content></ng-content>\n        <div class=\"input-container\">\n            <label [for]=\"'track-form-' + uniqueId + '-name'\" class=\"hidden\" trans>Title</label>\n            <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n        </div>\n        <div class=\"actions\">\n            <button type=\"button\" [class.active]=\"expanded\" mat-icon-button (click)=\"toggleExpandedState()\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" (click)=\"maybeCancel()\" mat-icon-button>\n                <mat-icon svgIcon=\"delete\"></mat-icon>\n            </button>\n        </div>\n    </div>\n    <div [@bodyExpansion]=\"getExpandedState()\" class=\"full-form\">\n        <div class=\"full-form-container\" [class.inside-album]=\"albumForm\">\n            <div class=\"left-column\">\n                <upload-image-control formControlName=\"image\" [defaultBackground]=\"defaultImage$ | async\" uploadType=\"track_image\"></upload-image-control>\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"left-column-action-button\" (click)=\"openUploadMusicModal()\">\n                    <span *ngIf=\"this.track\" trans>Replace File</span>\n                    <span *ngIf=\"!this.track\" trans>Upload Track</span>\n                </button>\n            </div>\n            <div class=\"many-inputs fields-container\">\n                <div class=\"input-container\" *ngIf=\"!albumForm\">\n                    <label [for]=\"'track-form-' + uniqueId + '-name'\" trans>Title</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n                    <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                </div>\n\n                <album-control formControlName=\"album\" [id]=\"'track-form-' + uniqueId + '-album_id'\" *ngIf=\"!albumForm && (settings.get('player.artist_type') === 'artist' || insideAdmin())\"></album-control>\n                <track-artist-control [error]=\"errors.artists\" [id]=\"'track-form-' + uniqueId + '-artists'\" formControlName=\"artists\" *ngIf=\"settings.get('player.artist_type') === 'artist' || insideAdmin()\"></track-artist-control>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-duration'\" trans>Duration (ms)</label>\n                    <input type=\"number\" [id]=\"'track-form-' + uniqueId + '-duration'\" formControlName=\"duration\" min=\"1\" required>\n                    <div class=\"error\" *ngIf=\"errors.duration\">{{errors.duration}}</div>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-youtube-id'\" trans>Youtube Video ID</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-youtube-id'\" formControlName=\"youtube_id\" minlength=\"1\" maxlength=\"30\">\n                    <div class=\"error\" *ngIf=\"errors.youtube_id\">{{errors.youtube_id}}</div>\n                    <p>ID only. https://www.youtube.com/embed?v=<strong>EPyh41zPg4Z</strong></p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-url'\" trans>Remote Track Url</label>\n                    <input type=\"url\" [id]=\"'track-form-' + uniqueId + '-track-url'\" formControlName=\"url\" minlength=\"1\" maxlength=\"191\">\n                    <div class=\"error\" *ngIf=\"errors.url\">{{errors.url}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-genres'\" trans>Genres</label>\n                    <chip-input placeholder=\"+Add genre\" [id]=\"'track-form-' + uniqueId + '-track-genres'\"[suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-tags'\" trans>Tags</label>\n                    <chip-input placeholder=\"+Add tag\" [id]=\"'track-form-' + uniqueId + '-track-tags'\" [suggestFn]=\"suggestTagFn\" formControlName=\"tags\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-description'\" trans>Description</label>\n                    <textarea type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-description'\" formControlName=\"description\" minlength=\"10\" maxlength=\"999\" rows=\"5\"></textarea>\n                </div>\n\n                <button type=\"submit\" mat-raised-button *ngIf=\"!albumForm\" color=\"accent\" [disabled]=\"(loading$ | async) || (uploadQueueItem && !uploadQueueItem.completed)\" trans>Save</button>\n                <button type=\"button\" mat-button (click)=\"maybeCancel()\" *ngIf=\"!albumForm && !track\" trans>Cancel</button>\n            </div>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {Track} from '../../models/Track';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {DefaultImagePaths} from '../../web-player/default-image-paths.enum';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {USER_MODEL} from '@common/core/types/models/User';\nimport {\n    matExpansionAnimations,\n    MatExpansionPanelState\n} from '@angular/material/expansion';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {finalize, map} from 'rxjs/operators';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {Router} from '@angular/router';\nimport {UploadFileResponse} from '@common/uploads/uploads-api.service';\nimport {Album} from '../../models/Album';\nimport {MixedArtist} from '../../web-player/artists/mixed-artist';\nimport {Settings} from '@common/core/config/settings.service';\nimport {isAbsoluteUrl} from '@common/core/utils/is-absolute-url';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {randomString} from '@common/core/utils/random-string';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {Search} from '../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\nexport interface ExtractedMetadata {\n    title?: string;\n    album?: Album;\n    album_name?: string;\n    artist?: MixedArtist;\n    artist_name?: string;\n    genres?: string[];\n    duration?: number;\n    release_date?: string;\n    comment?: string;\n    image?: FileEntry;\n    lyrics?: string;\n}\n\nexport interface TrackUploadResponse extends UploadFileResponse {\n    metadata?: ExtractedMetadata;\n}\n\n@Component({\n    selector: 'track-form',\n    templateUrl: './track-form.component.html',\n    styleUrls: ['./track-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.bodyExpansion]\n})\nexport class TrackFormComponent implements OnInit, OnChanges {\n    @Input() autoMatch = false;\n    // track that is being edited\n    @Input() track: Track;\n\n    // creating a new track for this upload\n    @Input() uploadQueueItem: UploadQueueItem;\n\n    // track will be saved along with this album\n    @Input() albumForm: FormGroup;\n\n    // number of this track inside parent album\n    @Input() number: number;\n\n    @Output() canceled = new EventEmitter<UploadQueueItem|Track>();\n    @Output() saved = new EventEmitter<Track>();\n\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<Track>]: string}>({});\n    public defaultImage$ = new BehaviorSubject<string>(DefaultImagePaths.album);\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public readonly uniqueId = randomString(5);\n\n    public form = this.fb.group({\n        id: [null],\n        name: [''],\n        image: [''],\n        description: [''],\n        number: [1],\n        tags: [[]],\n        genres: [[]],\n        duration: [null],\n        url: [''],\n        youtube_id: [''],\n        spotify_popularity: [''],\n        album: [null],\n        artists: [[]],\n        waveData: [null],\n        lyrics: [''],\n    });\n    public expanded = false;\n\n    constructor(\n        private fb: FormBuilder,\n        private currentUser: CurrentUser,\n        private tracks: Tracks,\n        private toast: Toast,\n        private modal: Modal,\n        private audioValidator: AudioUploadValidator,\n        private uploadQueue: UploadQueueService,\n        private waveGenerator: WaveformGenerator,\n        private router: Router,\n        public settings: Settings,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.number && changes.number.currentValue != null) {\n            this.form.patchValue({number: changes.number.currentValue});\n        }\n    }\n\n    ngOnInit() {\n        this.expanded = !this.albumForm;\n\n        if (this.track) {\n            const formValue = {...this.track};\n            formValue.tags = (this.track.tags || []).map(t => t.name) as any;\n            formValue.genres = (this.track.genres || []).map(t => t.display_name || t.name) as any;\n            this.form.patchValue(formValue);\n\n            if (this.track.album) {\n                this.defaultImage$.next(this.track.album.image || DefaultImagePaths.album);\n            }\n        }\n\n        if (this.uploadQueueItem) {\n            this.uploadQueueItem.uploadedResponse$.subscribe((response: TrackUploadResponse) => {\n                this.patchFormUsingFileUpload(response);\n            });\n        }\n\n        if (this.albumForm) {\n            this.albumForm.get('image').valueChanges.subscribe(url => {\n                this.defaultImage$.next(url || DefaultImagePaths.album);\n            });\n        }\n    }\n\n    public getPayload(): Partial<Track> {\n        const customData = this.uploadQueueItem ? this.uploadQueueItem.customData : {};\n        const payload =  {...this.form.value, ...customData};\n        if ( ! payload.artists.length && this.settings.get('player.artist_type') === 'user') {\n            payload.artists = [{id: this.currentUser.get('id'), artist_type: USER_MODEL}];\n        }\n        return payload;\n    }\n\n    public isUploading() {\n        return this.uploadQueueItem && !this.uploadQueueItem.completed;\n    }\n\n    public submit() {\n        if (this.albumForm) return;\n        this.loading$.next(true);\n\n        const payload = this.getPayload();\n\n        const request = this.track ?\n            this.tracks.update(this.track.id, payload) :\n            this.tracks.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (this.uploadQueueItem) {\n                    this.uploadQueue.remove(this.uploadQueueItem.id);\n                }\n                this.toast.open('Track saved.');\n                this.form.markAsPristine();\n                this.saved.emit(response.track);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors$.next(errResponse.errors);\n                scrollInvalidInputIntoView(this.errors$.value, `track-form-${this.uniqueId}`);\n            });\n    }\n\n    public toggleExpandedState() {\n        this.expanded = !this.expanded;\n    }\n\n    public getExpandedState(): MatExpansionPanelState {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n\n    public maybeCancel() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Remove Track',\n            body:  'Are you sure you want to cancel the upload and remove this track?',\n            ok:    'Remove'\n        }).beforeClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            if (this.uploadQueueItem) {\n                this.uploadQueue.remove(this.uploadQueueItem.id);\n                this.canceled.emit(this.uploadQueueItem);\n                this.toast.open('Upload canceled.');\n            } else if (this.track) {\n                this.tracks.delete([this.track.id]).subscribe(() => {\n                    this.canceled.emit(this.track);\n                    this.toast.open('Track deleted.');\n                });\n            }\n        });\n    }\n\n    public openUploadMusicModal() {\n        const params = {\n            uri: 'uploads',\n            validator: this.audioValidator,\n            httpParams: {autoMatch: this.autoMatch, diskPrefix: 'track_media', disk: 'public'},\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        openUploadWindow({types: [UploadInputTypes.audio, UploadInputTypes.video]}).then(uploadedFiles => {\n            if ( ! uploadedFiles) return;\n            // if this track form is already attached to existing upload queue item\n            // replace that item in queue service instead of creating a new item\n            const replacements = this.uploadQueueItem ? {[this.uploadQueueItem.id]: uploadedFiles[0]} : uploadedFiles;\n            this.uploadQueue.start(replacements, params).subscribe(response => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                    this.form.patchValue({waveData});\n                    queueItem.finishProcessing();\n                });\n                this.patchFormUsingFileUpload(response);\n                this.toast.open('Track uploaded.');\n            }, () => this.toast.open('Could not upload track'));\n            // make sure progress bar is shown if we're editing track from admin\n            if ( ! this.uploadQueueItem) {\n                this.uploadQueueItem = this.uploadQueue.uploads$.value[0];\n                this.cd.markForCheck();\n            }\n        });\n    }\n\n    private patchFormUsingFileUpload(response: TrackUploadResponse) {\n        const values: {[K in keyof Partial<Track>]: any} & {lyrics?: string} = {\n            name: response.metadata.title,\n            duration: response.metadata.duration,\n            url: response.fileEntry.url,\n            genres: response.metadata.genres || [],\n            description: response.metadata.comment,\n            lyrics: response.metadata.lyrics,\n        };\n        if (response.metadata.album) {\n            values.album = response.metadata.album;\n        }\n        if (response.metadata.artist) {\n            values.artists = [response.metadata.artist];\n\n            // set artist on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.artist) {\n                this.albumForm.patchValue({artist: response.metadata.artist});\n            }\n        }\n        if (response.metadata.image) {\n            values.image = response.metadata.image.url;\n\n            // set image on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.image) {\n                this.albumForm.patchValue({image: response.metadata.image.url});\n            }\n        }\n        if (response.metadata.release_date && this.albumForm && !this.albumForm.value.release_date) {\n            this.albumForm.patchValue({release_date: response.metadata.release_date});\n        }\n        this.form.patchValue(values);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public shouldShowDurationField() {\n        const trackUrl = this.form.get('url').value;\n        return !trackUrl || isAbsoluteUrl(trackUrl);\n    }\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {modelTypes: ['App\\\\Tag'], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {modelTypes: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","export function scrollInvalidInputIntoView(errors: {[key: string]: any}, prefix = '') {\r\n    let firstKey = Object.keys(errors)[0];\r\n    if (firstKey) {\r\n        if (prefix) {\r\n            firstKey = `${prefix}-${firstKey}`;\r\n        }\r\n        const node = document.getElementById(firstKey);\r\n        if (node) {\r\n            node.scrollIntoView({behavior: 'smooth', block: 'center', inline: 'center'});\r\n        }\r\n    }\r\n}\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nlet MatSlideToggle = /** @class */ (() => {\n    class MatSlideToggle extends _MatSlideToggleMixinBase {\n        constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n            super(elementRef);\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this.defaults = defaults;\n            this._animationMode = _animationMode;\n            this._onChange = (_) => { };\n            this._onTouched = () => { };\n            this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n            this._required = false;\n            this._checked = false;\n            /** Name value will be applied to the input element if present. */\n            this.name = null;\n            /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n            this.id = this._uniqueId;\n            /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n            this.labelPosition = 'after';\n            /** Used to set the aria-label attribute on the underlying input element. */\n            this.ariaLabel = null;\n            /** Used to set the aria-labelledby attribute on the underlying input element. */\n            this.ariaLabelledby = null;\n            /** An event will be dispatched each time the slide-toggle changes its value. */\n            this.change = new EventEmitter();\n            /**\n             * An event will be dispatched each time the slide-toggle input is toggled.\n             * This event is always emitted when the user toggles the slide toggle, but this does not mean\n             * the slide toggle's value has changed.\n             */\n            this.toggleChange = new EventEmitter();\n            this.tabIndex = parseInt(tabIndex) || 0;\n        }\n        /** Whether the slide-toggle is required. */\n        get required() { return this._required; }\n        set required(value) { this._required = coerceBooleanProperty(value); }\n        /** Whether the slide-toggle element is checked or not. */\n        get checked() { return this._checked; }\n        set checked(value) {\n            this._checked = coerceBooleanProperty(value);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Returns the unique id for the visual hidden input. */\n        get inputId() { return `${this.id || this._uniqueId}-input`; }\n        ngAfterContentInit() {\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe(focusOrigin => {\n                // Only forward focus manually when it was received programmatically or through the\n                // keyboard. We should not do this for mouse/touch focus for two reasons:\n                // 1. It can prevent clicks from landing in Chrome (see #18269).\n                // 2. They're already handled by the wrapping `label` element.\n                if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                    this._inputElement.nativeElement.focus();\n                }\n                else if (!focusOrigin) {\n                    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                    // Angular does not expect events to be raised during change detection, so any state\n                    // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                    // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                    // we defer telling the form control it has been touched until the next tick.\n                    Promise.resolve().then(() => this._onTouched());\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        /** Method being called whenever the underlying input emits a change event. */\n        _onChangeEvent(event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the component's `change` output.\n            event.stopPropagation();\n            this.toggleChange.emit();\n            // When the slide toggle's config disables toggle change event by setting\n            // `disableToggleValue: true`, the slide toggle's value does not change, and the\n            // checked state of the underlying input needs to be changed back.\n            if (this.defaults.disableToggleValue) {\n                this._inputElement.nativeElement.checked = this.checked;\n                return;\n            }\n            // Sync the value from the underlying input element with the component instance.\n            this.checked = this._inputElement.nativeElement.checked;\n            // Emit our custom change event only if the underlying input emitted one. This ensures that\n            // there is no change event, when the checked state changes programmatically.\n            this._emitChangeEvent();\n        }\n        /** Method being called whenever the slide-toggle has been clicked. */\n        _onInputClick(event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `slide-toggle` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        writeValue(value) {\n            this.checked = !!value;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        /** Implemented as a part of ControlValueAccessor. */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Focuses the slide-toggle. */\n        focus(options) {\n            this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n        }\n        /** Toggles the checked state of the slide-toggle. */\n        toggle() {\n            this.checked = !this.checked;\n            this._onChange(this.checked);\n        }\n        /**\n         * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n         */\n        _emitChangeEvent() {\n            this._onChange(this.checked);\n            this.change.emit(new MatSlideToggleChange(this, this.checked));\n        }\n        /** Method being called whenever the label text changes. */\n        _onLabelTextChange() {\n            // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n            // slide-toggle component will be only marked for check, but no actual change detection runs\n            // automatically. Instead of going back into the zone in order to trigger a change detection\n            // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n            // we only trigger an explicit change detection for the slide-toggle view and its children.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSlideToggle.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatSlideToggle.propDecorators = {\n        _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n        _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n        name: [{ type: Input }],\n        id: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        required: [{ type: Input }],\n        checked: [{ type: Input }],\n        change: [{ type: Output }],\n        toggleChange: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return MatSlideToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nlet MatSlideToggleRequiredValidator = /** @class */ (() => {\n    class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n    }\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatSlideToggleRequiredValidator;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nlet _MatSlideToggleRequiredValidatorModule = /** @class */ (() => {\n    class _MatSlideToggleRequiredValidatorModule {\n    }\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n    return _MatSlideToggleRequiredValidatorModule;\n})();\nlet MatSlideToggleModule = /** @class */ (() => {\n    class MatSlideToggleModule {\n    }\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n    return MatSlideToggleModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import {Injectable} from '@angular/core';\r\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\r\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\r\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\r\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AudioUploadValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 50;\r\n    public showToast = true;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: this.getMaxFileSize()},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['audio', 'video']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n\r\n    protected getMaxFileSize(): number {\r\n        return this.settings.get(\r\n            'uploads.max_size',\r\n            convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')\r\n        );\r\n    }\r\n}\r\n","import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nlet CdkAccordion = /** @class */ (() => {\n    class CdkAccordion {\n        constructor() {\n            /** Emits when the state of the accordion changes */\n            this._stateChanges = new Subject();\n            /** Stream that emits true/false when openAll/closeAll is triggered. */\n            this._openCloseAllActions = new Subject();\n            /** A readonly id value to use for unique selection coordination. */\n            this.id = `cdk-accordion-${nextId++}`;\n            this._multi = false;\n        }\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get multi() { return this._multi; }\n        set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n        /** Opens all enabled accordion items in an accordion where multi is enabled. */\n        openAll() {\n            this._openCloseAll(true);\n        }\n        /** Closes all enabled accordion items in an accordion where multi is enabled. */\n        closeAll() {\n            this._openCloseAll(false);\n        }\n        ngOnChanges(changes) {\n            this._stateChanges.next(changes);\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n        _openCloseAll(expanded) {\n            if (this.multi) {\n                this._openCloseAllActions.next(expanded);\n            }\n        }\n    }\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkAccordion.propDecorators = {\n        multi: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n    return CdkAccordion;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nlet CdkAccordionItem = /** @class */ (() => {\n    class CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n            this.accordion = accordion;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._expansionDispatcher = _expansionDispatcher;\n            /** Subscription to openAll/closeAll events. */\n            this._openCloseAllSubscription = Subscription.EMPTY;\n            /** Event emitted every time the AccordionItem is closed. */\n            this.closed = new EventEmitter();\n            /** Event emitted every time the AccordionItem is opened. */\n            this.opened = new EventEmitter();\n            /** Event emitted when the AccordionItem is destroyed. */\n            this.destroyed = new EventEmitter();\n            /**\n             * Emits whenever the expanded state of the accordion changes.\n             * Primarily used to facilitate two-way binding.\n             * @docs-private\n             */\n            this.expandedChange = new EventEmitter();\n            /** The unique AccordionItem id. */\n            this.id = `cdk-accordion-child-${nextId$1++}`;\n            this._expanded = false;\n            this._disabled = false;\n            /** Unregister function for _expansionDispatcher. */\n            this._removeUniqueSelectionListener = () => { };\n            this._removeUniqueSelectionListener =\n                _expansionDispatcher.listen((id, accordionId) => {\n                    if (this.accordion && !this.accordion.multi &&\n                        this.accordion.id === accordionId && this.id !== id) {\n                        this.expanded = false;\n                    }\n                });\n            // When an accordion item is hosted in an accordion, subscribe to open/close events.\n            if (this.accordion) {\n                this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n            }\n        }\n        /** Whether the AccordionItem is expanded. */\n        get expanded() { return this._expanded; }\n        set expanded(expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    const accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the AccordionItem is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n        /** Emits an event for the accordion item being destroyed. */\n        ngOnDestroy() {\n            this.opened.complete();\n            this.closed.complete();\n            this.destroyed.emit();\n            this.destroyed.complete();\n            this._removeUniqueSelectionListener();\n            this._openCloseAllSubscription.unsubscribe();\n        }\n        /** Toggles the expanded state of the accordion item. */\n        toggle() {\n            if (!this.disabled) {\n                this.expanded = !this.expanded;\n            }\n        }\n        /** Sets the expanded state of the accordion item to false. */\n        close() {\n            if (!this.disabled) {\n                this.expanded = false;\n            }\n        }\n        /** Sets the expanded state of the accordion item to true. */\n        open() {\n            if (!this.disabled) {\n                this.expanded = true;\n            }\n        }\n        _subscribeToOpenCloseAllActions() {\n            return this.accordion._openCloseAllActions.subscribe(expanded => {\n                // Only change expanded state if item is enabled\n                if (!this.disabled) {\n                    this.expanded = expanded;\n                }\n            });\n        }\n    }\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n    CdkAccordionItem.ctorParameters = () => [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher }\n    ];\n    CdkAccordionItem.propDecorators = {\n        closed: [{ type: Output }],\n        opened: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return CdkAccordionItem;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet CdkAccordionModule = /** @class */ (() => {\n    class CdkAccordionModule {\n    }\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n    return CdkAccordionModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n\n//# sourceMappingURL=accordion.js.map","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, hasModifierKey, SPACE, HOME, END } from '@angular/cdk/keycodes';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n} }\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nlet MatExpansionPanelContent = /** @class */ (() => {\n    class MatExpansionPanelContent {\n        constructor(_template) {\n            this._template = _template;\n        }\n    }\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\n    MatExpansionPanelContent.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return MatExpansionPanelContent;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nlet MatExpansionPanel = /** @class */ (() => {\n    class MatExpansionPanel extends CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n            super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n            this._viewContainerRef = _viewContainerRef;\n            this._animationMode = _animationMode;\n            this._hideToggle = false;\n            /** An event emitted after the body's expansion animation happens. */\n            this.afterExpand = new EventEmitter();\n            /** An event emitted after the body's collapse animation happens. */\n            this.afterCollapse = new EventEmitter();\n            /** Stream that emits for changes in `@Input` properties. */\n            this._inputChanges = new Subject();\n            /** ID for the associated header element. Used for a11y labelling. */\n            this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n            /** Stream of body animation done events. */\n            this._bodyAnimationDone = new Subject();\n            this.accordion = accordion;\n            this._document = _document;\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(event => {\n                if (event.fromState !== 'void') {\n                    if (event.toState === 'expanded') {\n                        this.afterExpand.emit();\n                    }\n                    else if (event.toState === 'collapsed') {\n                        this.afterCollapse.emit();\n                    }\n                }\n            });\n            if (defaultOptions) {\n                this.hideToggle = defaultOptions.hideToggle;\n            }\n        }\n        /** Whether the toggle indicator should be hidden. */\n        get hideToggle() {\n            return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n        }\n        set hideToggle(value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        }\n        /** The position of the expansion indicator. */\n        get togglePosition() {\n            return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n        }\n        set togglePosition(value) {\n            this._togglePosition = value;\n        }\n        /** Determines whether the expansion panel should have spacing between it and its siblings. */\n        _hasSpacing() {\n            if (this.accordion) {\n                return this.expanded && this.accordion.displayMode === 'default';\n            }\n            return false;\n        }\n        /** Gets the expanded state string. */\n        _getExpandedState() {\n            return this.expanded ? 'expanded' : 'collapsed';\n        }\n        /** Toggles the expanded state of the expansion panel. */\n        toggle() {\n            this.expanded = !this.expanded;\n        }\n        /** Sets the expanded state of the expansion panel to false. */\n        close() {\n            this.expanded = false;\n        }\n        /** Sets the expanded state of the expansion panel to true. */\n        open() {\n            this.expanded = true;\n        }\n        ngAfterContentInit() {\n            if (this._lazyContent) {\n                // Render the content as soon as the panel becomes open.\n                this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n                    this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n                });\n            }\n        }\n        ngOnChanges(changes) {\n            this._inputChanges.next(changes);\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            this._bodyAnimationDone.complete();\n            this._inputChanges.complete();\n        }\n        /** Checks whether the expansion panel's content contains the currently-focused element. */\n        _containsFocus() {\n            if (this._body) {\n                const focusedElement = this._document.activeElement;\n                const bodyElement = this._body.nativeElement;\n                return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n            }\n            return false;\n        }\n    }\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\n    MatExpansionPanel.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n    ];\n    MatExpansionPanel.propDecorators = {\n        hideToggle: [{ type: Input }],\n        togglePosition: [{ type: Input }],\n        afterExpand: [{ type: Output }],\n        afterCollapse: [{ type: Output }],\n        _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n        _body: [{ type: ViewChild, args: ['body',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [MAT_ACCORDION]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { afterExpand: [{\n            type: Output\n        }], afterCollapse: [{\n            type: Output\n        }], hideToggle: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], _lazyContent: [{\n            type: ContentChild,\n            args: [MatExpansionPanelContent]\n        }], _body: [{\n            type: ViewChild,\n            args: ['body']\n        }] }); })();\n    return MatExpansionPanel;\n})();\nlet MatExpansionPanelActionRow = /** @class */ (() => {\n    class MatExpansionPanelActionRow {\n    }\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            }]\n    }], null, null); })();\n    return MatExpansionPanelActionRow;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nlet MatExpansionPanelHeader = /** @class */ (() => {\n    class MatExpansionPanelHeader {\n        constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n            this.panel = panel;\n            this._element = _element;\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            this._parentChangeSubscription = Subscription.EMPTY;\n            const accordionHideToggleChange = panel.accordion ?\n                panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n                EMPTY;\n            // Since the toggle state depends on an @Input on the panel, we\n            // need to subscribe and trigger change detection manually.\n            this._parentChangeSubscription =\n                merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n                    return !!(changes['hideToggle'] ||\n                        changes['disabled'] ||\n                        changes['togglePosition']);\n                })))\n                    .subscribe(() => this._changeDetectorRef.markForCheck());\n            // Avoids focus being lost if the panel contained the focused element and was closed.\n            panel.closed\n                .pipe(filter(() => panel._containsFocus()))\n                .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n            if (defaultOptions) {\n                this.expandedHeight = defaultOptions.expandedHeight;\n                this.collapsedHeight = defaultOptions.collapsedHeight;\n            }\n        }\n        /**\n         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n         * @docs-private\n         */\n        get disabled() {\n            return this.panel.disabled;\n        }\n        /** Toggles the expanded state of the panel. */\n        _toggle() {\n            if (!this.disabled) {\n                this.panel.toggle();\n            }\n        }\n        /** Gets whether the panel is expanded. */\n        _isExpanded() {\n            return this.panel.expanded;\n        }\n        /** Gets the expanded state string of the panel. */\n        _getExpandedState() {\n            return this.panel._getExpandedState();\n        }\n        /** Gets the panel id. */\n        _getPanelId() {\n            return this.panel.id;\n        }\n        /** Gets the toggle position for the header. */\n        _getTogglePosition() {\n            return this.panel.togglePosition;\n        }\n        /** Gets whether the expand indicator should be shown. */\n        _showToggle() {\n            return !this.panel.hideToggle && !this.panel.disabled;\n        }\n        /**\n         * Gets the current height of the header. Null if no custom height has been\n         * specified, and if the default height from the stylesheet should be used.\n         */\n        _getHeaderHeight() {\n            const isExpanded = this._isExpanded();\n            if (isExpanded && this.expandedHeight) {\n                return this.expandedHeight;\n            }\n            else if (!isExpanded && this.collapsedHeight) {\n                return this.collapsedHeight;\n            }\n            return null;\n        }\n        /** Handle keydown event calling to toggle() if appropriate. */\n        _keydown(event) {\n            switch (event.keyCode) {\n                // Toggle for space and enter keys.\n                case SPACE:\n                case ENTER:\n                    if (!hasModifierKey(event)) {\n                        event.preventDefault();\n                        this._toggle();\n                    }\n                    break;\n                default:\n                    if (this.panel.accordion) {\n                        this.panel.accordion._handleHeaderKeydown(event);\n                    }\n                    return;\n            }\n        }\n        /**\n         * Focuses the panel header. Implemented as a part of `FocusableOption`.\n         * @param origin Origin of the action that triggered the focus.\n         * @docs-private\n         */\n        focus(origin = 'program', options) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._element).subscribe(origin => {\n                if (origin && this.panel.accordion) {\n                    this.panel.accordion._handleHeaderFocus(this);\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._parentChangeSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element);\n        }\n    }\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? 0 - 1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, ngContentSelectors: _c4, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"], encapsulation: 2, data: { animation: [\n            matExpansionAnimations.indicatorRotate,\n        ] }, changeDetection: 0 });\n    MatExpansionPanelHeader.ctorParameters = () => [\n        { type: MatExpansionPanel, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatExpansionPanelHeader.propDecorators = {\n        expandedHeight: [{ type: Input }],\n        collapsedHeight: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[style.height]': '_getHeaderHeight()',\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)'\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n            }]\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { expandedHeight: [{\n            type: Input\n        }], collapsedHeight: [{\n            type: Input\n        }] }); })();\n    return MatExpansionPanelHeader;\n})();\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nlet MatExpansionPanelDescription = /** @class */ (() => {\n    class MatExpansionPanelDescription {\n    }\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            }]\n    }], null, null); })();\n    return MatExpansionPanelDescription;\n})();\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nlet MatExpansionPanelTitle = /** @class */ (() => {\n    class MatExpansionPanelTitle {\n    }\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            }]\n    }], null, null); })();\n    return MatExpansionPanelTitle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nlet MatAccordion = /** @class */ (() => {\n    class MatAccordion extends CdkAccordion {\n        constructor() {\n            super(...arguments);\n            /** Headers belonging to this accordion. */\n            this._ownHeaders = new QueryList();\n            this._hideToggle = false;\n            /**\n             * Display mode used for all expansion panels in the accordion. Currently two display\n             * modes exist:\n             *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n             *     panel at a different elevation from the rest of the accordion.\n             *  flat - no spacing is placed around expanded panels, showing all panels at the same\n             *     elevation.\n             */\n            this.displayMode = 'default';\n            /** The position of the expansion indicator. */\n            this.togglePosition = 'after';\n        }\n        /** Whether the expansion indicator should be hidden. */\n        get hideToggle() { return this._hideToggle; }\n        set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n        ngAfterContentInit() {\n            this._headers.changes\n                .pipe(startWith(this._headers))\n                .subscribe((headers) => {\n                this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n                this._ownHeaders.notifyOnChanges();\n            });\n            this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n        }\n        /** Handles keyboard events coming in from the panel headers. */\n        _handleHeaderKeydown(event) {\n            const { keyCode } = event;\n            const manager = this._keyManager;\n            if (keyCode === HOME) {\n                if (!hasModifierKey(event)) {\n                    manager.setFirstItemActive();\n                    event.preventDefault();\n                }\n            }\n            else if (keyCode === END) {\n                if (!hasModifierKey(event)) {\n                    manager.setLastItemActive();\n                    event.preventDefault();\n                }\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n        }\n        _handleHeaderFocus(header) {\n            this._keyManager.updateActiveItem(header);\n        }\n    }\nMatAccordion.ɵfac = function MatAccordion_Factory(t) { return ɵMatAccordion_BaseFactory(t || MatAccordion); };\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    } }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatAccordion.propDecorators = {\n        _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n        hideToggle: [{ type: Input }],\n        displayMode: [{ type: Input }],\n        togglePosition: [{ type: Input }]\n    };\nconst ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi'\n                }\n            }]\n    }], null, { displayMode: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], hideToggle: [{\n            type: Input\n        }], _headers: [{\n            type: ContentChildren,\n            args: [MatExpansionPanelHeader, { descendants: true }]\n        }] }); })();\n    return MatAccordion;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatExpansionModule = /** @class */ (() => {\n    class MatExpansionModule {\n    }\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); }, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; }, imports: function () { return [CommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ]\n            }]\n    }], null, null); })();\n    return MatExpansionModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };\n\n//# sourceMappingURL=expansion.js.map","import { Injectable } from '@angular/core';\r\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\r\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\r\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\r\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceImageUploadValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 5;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['image']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Track} from '../../../models/Track';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {TrackFormComponent} from '../../../uploading/track-form/track-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'crupdate-track-page',\n    templateUrl: './crupdate-track-page.component.html',\n    styleUrls: ['./crupdate-track-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTrackPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(TrackFormComponent, {static: true}) trackForm: AlbumFormComponent;\n    public track: Track;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n        private currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.track = data.api.track;\n            }\n        });\n    }\n\n    public toTracksPage() {\n        if (this.insideAdmin()) {\n            this.router.navigate(['/admin/tracks']);\n        } else {\n            this.router.navigate(['/user', this.currentUser.get('id'), this.currentUser.get('display_name'), 'tracks']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.trackForm.form.dirty;\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.includes('admin');\n    }\n}\n","<track-form [track]=\"track\" class=\"material-panel\" (canceled)=\"toTracksPage()\" [autoMatch]=\"settings.get('player.artist_type') === 'artist'\" (saved)=\"toTracksPage()\"></track-form>","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { openUploadWindow } from '../utils/open-upload-window';\r\nimport { UploadInputConfig } from '../upload-input-config';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\n\r\n@Directive({\r\n    selector: '[uploadButton]'\r\n})\r\nexport class UploadButtonDirective implements OnInit {\r\n    @Input('uploadButton') config: UploadInputConfig = {};\r\n    @Output() filesSelected = new EventEmitter<UploadedFile[]>();\r\n\r\n    constructor(private el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        this.el.nativeElement.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            openUploadWindow(this.config).then(files => {\r\n                if (files && files.length) {\r\n                    this.filesSelected.emit(files);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    HostBinding,\r\n    Input,\r\n    OnInit,\r\n    TemplateRef,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {BehaviorSubject, Observable, of} from 'rxjs';\r\nimport {MatAutocomplete} from '@angular/material/autocomplete';\r\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators';\r\nimport {Model} from '../../../types/models/model';\r\n\r\ntype ChipValue = 'string' | Model;\r\n\r\n@Component({\r\n    selector: 'chip-input',\r\n    templateUrl: './chip-input.component.html',\r\n    styleUrls: ['./chip-input.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: ChipInputComponent,\r\n        multi: true,\r\n    }]\r\n})\r\nexport class ChipInputComponent implements ControlValueAccessor, OnInit {\r\n    @Input() placeholder: string;\r\n    @Input() type = 'text';\r\n    @Input() suggestFn: (query: string) => Observable<ChipValue[]>;\r\n    @Input() @HostBinding('class.select-mode') selectMode = false;\r\n    @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n    @ViewChild('inputEl', {static: true}) inputEl: ElementRef<HTMLInputElement>;\r\n    @ViewChild('selectModeTemplate') selectModeTemplate: TemplateRef<any>;\r\n\r\n    public formControl = new FormControl();\r\n\r\n    public propagateChange: (items: ChipValue[]) => void;\r\n    public items$ = new BehaviorSubject<ChipValue[]>([]);\r\n    public suggestedValues$ = new BehaviorSubject<ChipValue[]>([]);\r\n    @Input() set suggestedValues(values: ChipValue[]) {\r\n        this.suggestedValues$.next(values);\r\n    }\r\n\r\n    constructor(\r\n        public el: ElementRef<HTMLElement>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.suggestFn) {\r\n            this.bindToSearchControl();\r\n        }\r\n        if (this.selectMode) {\r\n           // TODO: implement\r\n        }\r\n    }\r\n\r\n    public remove(index: number) {\r\n        const items = [...this.items$.value];\r\n        items.splice(index, 1);\r\n        this.items$.next(items);\r\n        this.propagateChange(this.items$.value);\r\n    }\r\n\r\n    public addFromChipInput(value: ChipValue, propagate = true) {\r\n        if (value &&  !this.matAutocomplete.isOpen && !this.selectMode) {\r\n            this.add(value, propagate);\r\n        }\r\n    }\r\n\r\n    public addFromAutocomplete(value: ChipValue, propagate = true) {\r\n        this.add(value, propagate);\r\n    }\r\n\r\n    private add(value: ChipValue, propagate = true) {\r\n        value = (typeof value === 'string' ? value.trim() : value) as ChipValue;\r\n        const duplicate = this.findValueIndex(value) > -1;\r\n        if (value && !duplicate) {\r\n            this.items$.next([...this.items$.value, value]);\r\n            if (propagate) {\r\n                this.propagateChange(this.items$.value);\r\n            }\r\n        }\r\n        if (this.inputEl) {\r\n            this.inputEl.nativeElement.value = '';\r\n        }\r\n        this.formControl.setValue(null);\r\n        this.suggestedValues$.next([]);\r\n    }\r\n\r\n    private findValueIndex(value: ChipValue) {\r\n        if (typeof value === 'string') {\r\n            return this.items$.value.indexOf(value);\r\n        } else {\r\n            return this.items$.value.findIndex(v => (v as Model).id === value.id);\r\n        }\r\n    }\r\n\r\n    public writeValue(value: ChipValue[] = []) {\r\n        if (value && value.length) {\r\n            value.forEach(item => this.add(item, false));\r\n        } else if (this.items$.value.length) {\r\n            while (this.items$.value.length !== 0) {\r\n                this.remove(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerOnChange(fn: (items: ChipValue[]) => void) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    public registerOnTouched() {}\r\n\r\n    private bindToSearchControl() {\r\n        this.formControl.valueChanges.pipe(\r\n            debounceTime(150),\r\n            distinctUntilChanged(),\r\n            switchMap(query => query ? this.suggestFn(query) : of([])),\r\n            catchError(() => of([])),\r\n        ).subscribe(values => {\r\n            const filtered = values.filter(v => this.findValueIndex(v) === -1);\r\n            this.suggestedValues$.next(filtered);\r\n        });\r\n    }\r\n\r\n    public displayChipValue(value: ChipValue): string {\r\n        return typeof value === 'object' ? value.name : value;\r\n    }\r\n}\r\n","<mat-chip-list #chipList [selectable]=\"false\">\r\n    <mat-chip\r\n        *ngFor=\"let item of items$ | async; index as i\"\r\n        [selectable]=\"false\"\r\n        [removable]=\"!selectMode\"\r\n        (removed)=\"remove(i)\"\r\n    >\r\n        {{displayChipValue(item)}}\r\n        <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\r\n    </mat-chip>\r\n    <input [placeholder]=\"placeholder | trans\"\r\n           *ngIf=\"!selectMode\"\r\n           #inputEl\r\n           [type]=\"type\"\r\n           class=\"mat-chip-input mat-input-element\"\r\n           [matChipInputFor]=\"chipList\"\r\n           [matChipInputAddOnBlur]=\"true\"\r\n           [matAutocomplete]=\"auto\"\r\n           [matAutocompleteConnectedTo]=\"{elementRef: el}\"\r\n           [formControl]=\"formControl\"\r\n           (matChipInputTokenEnd)=\"addFromChipInput($event.value)\" />\r\n</mat-chip-list>\r\n\r\n<mat-autocomplete class=\"chip-input-autocomplete-panel\" #auto=\"matAutocomplete\" (optionSelected)=\"addFromAutocomplete($event.option.value)\" [autoActiveFirstOption]=\"true\">\r\n    <mat-option *ngFor=\"let value of suggestedValues$ | async\" [value]=\"value\">{{displayChipValue(value)}}</mat-option>\r\n</mat-autocomplete>\r\n\r\n<ng-template #selectModeTemplate let-suggestions=\"suggestions\">\r\n    <mat-option *ngFor=\"let value of suggestions\" [value]=\"value\">{{displayChipValue(value)}}</mat-option>\r\n</ng-template>\r\n","import { CanDeactivate } from '@angular/router';\r\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\r\nimport {Observable} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\r\n    constructor(private modal: Modal) {}\r\n\r\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\r\n        if (component.canDeactivate()) {\r\n            return true;\r\n        } else {\r\n            return this.modal.show(ConfirmModalComponent, {\r\n                title: 'Unsaved Changes',\r\n                body:  'You have unsaved changes. Do you want to discard them?',\r\n                ok:    'Discard'\r\n            }).beforeClosed();\r\n        }\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Album} from '../../../models/Album';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'crupdate-album-page',\n    templateUrl: './crupdate-album-page.component.html',\n    styleUrls: ['./crupdate-album-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateAlbumPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(AlbumFormComponent, {static: true}) albumForm: AlbumFormComponent;\n    public album: Album;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private currentUser: CurrentUser,\n        public settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.album = data.api.album;\n            }\n        });\n    }\n\n    public toAlbumsPage() {\n        if (this.router.url.includes('admin')) {\n            this.router.navigate(['/admin/albums']);\n        } else {\n            this.router.navigate(['/user', this.currentUser.get('id'), this.currentUser.get('display_name'), 'albums']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.albumForm.form.dirty;\n    }\n}\n","<album-form [album]=\"album\" class=\"material-panel\" (canceled)=\"toAlbumsPage()\" [autoMatch]=\"settings.get('player.artist_type') === 'artist'\" [confirmCancel]=\"false\" (saved)=\"toAlbumsPage()\"></album-form>","export enum UploadUri {\n    Image = 'uploads/images',\n}\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import {Component, EventEmitter, HostBinding, Input, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {UploadsApiService} from '@common/uploads/uploads-api.service';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {openUploadWindow} from '../../../uploads/utils/open-upload-window';\nimport {MatMenuTrigger} from '@angular/material/menu';\n\n@Component({\n    selector: 'upload-image-control',\n    templateUrl: './upload-image-control.component.html',\n    styleUrls: ['./upload-image-control.component.scss'],\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: UploadImageControlComponent,\n        multi: true,\n    }]\n})\nexport class UploadImageControlComponent implements ControlValueAccessor {\n    @Output() fileDeleted = new EventEmitter();\n    @ViewChild(MatMenuTrigger) menuTrigger: MatMenuTrigger;\n    @Input() defaultBackground: string;\n    @Input() buttonText = 'Upload image';\n    @Input() uploadConfig: UploadApiConfig;\n    @Input() diskPrefix: string;\n    @Input() @HostBinding('class.compact') compact = false;\n    public uploadInputConfig: UploadInputConfig = {multiple: false, types: [UploadInputTypes.image]};\n    public src$ = new BehaviorSubject<string>(null);\n    private propagateChange: Function;\n\n    constructor(\n        private uploadQueue: UploadQueueService,\n        private imageValidator: AppearanceImageUploadValidator,\n        private uploadsApi: UploadsApiService,\n        private http: AppHttpClient,\n    ) {}\n\n    public writeValue(value: string) {\n        this.src$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public uploadImage(files: UploadedFile[]) {\n        this.uploadQueue.start(files, this.uploadConfig || this.defaultUploadConfig())\n            .subscribe(response => {\n                this.src$.next(response.fileEntry.url);\n                this.propagateChange(response.fileEntry.url);\n            });\n    }\n\n    public deleteUpload() {\n        const params = {paths: [this.src$.value], deleteForever: true};\n        const request = this.uploadConfig && this.uploadConfig.uri ?\n            this.http.delete(this.uploadConfig.uri, params) :\n            this.uploadsApi.delete(params);\n\n        request.subscribe(() => {\n            this.src$.next(null);\n            this.propagateChange(null);\n            this.fileDeleted.emit();\n        });\n    }\n\n    private defaultUploadConfig(): UploadApiConfig {\n        return {\n            httpParams: {diskPrefix: this.diskPrefix || 'common_media'},\n            uri: UploadUri.Image,\n            validator: this.imageValidator,\n        };\n    }\n\n    public openUploadDialog() {\n        if (this.src$.value) {\n            this.menuTrigger.toggleMenu();\n        } else {\n            openUploadWindow(this.uploadInputConfig).then(files => {\n                this.uploadImage(files);\n            });\n        }\n    }\n}\n","<image-or-icon *ngIf=\"src$ | async as src; else defaultBg\" [src]=\"src\" class=\"inherit-size\"></image-or-icon>\r\n<ng-template #defaultBg>\r\n    <image-or-icon *ngIf=\"defaultBackground\" [src]=\"defaultBackground\" class=\"inherit-size\"></image-or-icon>\r\n</ng-template>\r\n<div class=\"action-buttons\">\r\n    <ng-container *ngIf=\"compact\">\r\n        <span [matMenuTriggerFor]=\"menu\"></span>\r\n        <button type=\"button\" mat-icon-button  (click)=\"openUploadDialog()\" class=\"action-button\">\r\n            <mat-icon svgIcon=\"edit\"></mat-icon>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button type=\"button\" mat-menu-item [uploadButton]=\"uploadInputConfig\" (filesSelected)=\"uploadImage($event)\">{{buttonText}}</button>\r\n            <button type=\"button\" mat-menu-item (click)=\"deleteUpload()\" trans>Remove</button>\r\n        </mat-menu>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"!compact\">\r\n        <button type=\"button\" class=\"action-button\" mat-stroked-button color=\"accent\" [uploadButton]=\"uploadInputConfig\" (filesSelected)=\"uploadImage($event)\" trans>{{buttonText}}</button>\r\n        <button type=\"button\" class=\"action-button delete-button\" mat-icon-button *ngIf=\"src$ | async\" (click)=\"deleteUpload()\">\r\n            <mat-icon svgIcon=\"delete\"></mat-icon>\r\n        </button>\r\n    </ng-container>\r\n</div>\r\n<upload-progress-bar></upload-progress-bar>\r\n","<div class=\"fake-input\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\n        <span *ngIf=\"selectedArtist$ | async as selectedArtist; else anyArtist\">\n            <media-image class=\"result-image\" [media]=\"selectedArtist\"></media-image>\n            {{selectedArtist.name}}\n        </span>\n    <ng-template #anyArtist>\n        <span trans>None</span>\n    </ng-template>\n    <div class=\"arrow-container\">\n        <div class=\"arrow\"></div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"album-artist-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button mat-menu-item (click)=\"selectArtist(null)\">\n        <media-image default=\"artist\" class=\"result-image\"></media-image>\n        <div class=\"info any-user-info\">\n            <div class=\"name\" trans>No Artist</div>\n        </div>\n    </button>\n    <button mat-menu-item *ngFor=\"let artist of artists$ | async\" (click)=\"selectArtist(artist)\">\n        <media-image class=\"result-image\" [media]=\"artist\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{artist.name}}</div>\n            <div class=\"email\" trans>Artist</div>\n        </div>\n    </button>\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(artists$ | async).length\" trans>No artists found.</button>\n</mat-menu>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    finalize,\n    map,\n    switchMap\n} from 'rxjs/operators';\nimport {MixedArtist} from '../../../web-player/artists/mixed-artist';\nimport {Search} from '../../../web-player/search/search.service';\nimport {ARTIST_MODEL} from '../../../models/Artist';\n\n@Component({\n    selector: 'album-artist-control',\n    templateUrl: './album-artist-control.component.html',\n    styleUrls: ['./album-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'tabindex': '0'},\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumArtistControlComponent implements OnInit, ControlValueAccessor {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public artists$ = new BehaviorSubject<MixedArtist[]>([]);\n    public selectedArtist$ = new BehaviorSubject<MixedArtist>(null);\n    private propagateChange: Function;\n    public searchedOnce = false;\n\n    constructor(private search: Search) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: MixedArtist) {\n        this.selectedArtist$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchArtists(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.artists$.next(users);\n        });\n    }\n\n    private searchArtists(query: string): Observable<MixedArtist[]> {\n        this.loading$.next(true);\n        return this.search.media(query, {limit: 7, forceLocal: true, modelTypes: [ARTIST_MODEL]})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.results.artists),\n            );\n    }\n\n    public onMenuOpened() {\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectArtist(artist: MixedArtist) {\n        this.selectedArtist$.next(artist);\n        this.propagateChange(artist);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\r\n    <div class=\"main-info-fields\">\r\n        <div class=\"left-column\">\r\n            <upload-image-control formControlName=\"image\" uploadType=\"album\"></upload-image-control>\r\n            <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-tracks-button\" [uploadButton]=\"uploadButtonConfig\" (filesSelected)=\"uploadFiles($event)\" trans>Upload Tracks</button>\r\n        </div>\r\n        <div class=\"text-fields-container many-inputs\">\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-name\" trans>Name</label>\r\n                <input type=\"text\" id=\"album-form-name\" formControlName=\"name\" required>\r\n                <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-release_date\" trans>Release Date</label>\r\n                <input type=\"date\" placeholder=\"YYYY-MM-DD\" id=\"album-form-release_date\" formControlName=\"release_date\" required>\r\n                <div class=\"error\" *ngIf=\"errors.release_date\">{{errors.release_date}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\" *ngIf=\"!hideArtistControl || (!artist && settings.get('player.artist_type') === 'artist')\">\r\n                <label for=\"album-form-artist\" trans>Artist</label>\r\n                <album-artist-control id=\"album-form-artist\" formControlName=\"artist\"></album-artist-control>\r\n                <div class=\"error\" *ngIf=\"errors.artist_id\">{{errors.artist_id}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-description\" trans>Description</label>\r\n                <textarea type=\"text\" id=\"album-form-description\" formControlName=\"description\" minlength=\"10\" maxlength=\"250\" rows=\"5\"></textarea>\r\n                <div class=\"error\" *ngIf=\"errors.description\">{{errors.description}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-genres\" trans>Genres</label>\r\n                <chip-input placeholder=\"+Add genre\" id=\"album-form-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\r\n                <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"album-form-tags\" trans>Tags</label>\r\n                <chip-input placeholder=\"+Add tag\" id=\"album-form-tags\" formControlName=\"tags\" [suggestFn]=\"suggestTagFn\"></chip-input>\r\n                <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\r\n            </div>\r\n\r\n            <button type=\"submit\" [disabled]=\"loading$ | async\" mat-raised-button color=\"accent\" trans>Save</button>\r\n            <button type=\"button\" mat-button (click)=\"maybeCancel()\" trans>Cancel</button>\r\n        </div>\r\n    </div>\r\n</form>\r\n\r\n<ul class=\"track-list\" cdkDropList (cdkDropListDropped)=\"reorderTracks($event)\">\r\n    <li class=\"track-list-item\" *ngFor=\"let track of allTracks$ | async; trackBy: trackByFn; index as index\" cdkDrag>\r\n        <track-form [albumForm]=\"form\" [track]=\"track\" *ngIf=\"track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\r\n            <button mat-icon-button cdkDragHandle type=\"button\">\r\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n            </button>\r\n        </track-form>\r\n        <track-form [albumForm]=\"form\" [uploadQueueItem]=\"track\" *ngIf=\"!track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\r\n            <button mat-icon-button cdkDragHandle type=\"button\">\r\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n            </button>\r\n        </track-form>\r\n    </li>\r\n</ul>\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren\n} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Albums} from '../../web-player/albums/albums.service';\nimport {TrackFormComponent} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {USER_MODEL} from '@common/core/types/models/User';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {Track} from '../../models/Track';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {Artist} from '../../models/Artist';\nimport {Settings} from '@common/core/config/settings.service';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {Search} from '../../web-player/search/search.service';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\ndeclare module '@common/uploads/types/upload-http-params' {\n    interface UploadHttpParams {\n        autoMatch?: boolean;\n    }\n}\n\n@Component({\n    selector: 'album-form',\n    templateUrl: './album-form.component.html',\n    styleUrls: ['./album-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumFormComponent implements OnInit {\n    public uploadButtonConfig: UploadInputConfig = {multiple: true, types: [UploadInputTypes.audio, UploadInputTypes.video]};\n    // album that is being edited\n    @Input() album: Album;\n    // artist album should be attached to\n    @Input() artist: Artist;\n    @Input() hideArtistControl = false;\n    @Input() confirmCancel = true;\n    @Output() canceled = new EventEmitter();\n    @Input() autoMatch = false;\n    @Output() saved = new EventEmitter<Album>();\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n\n    public errors: Partial<Album> = {};\n    public loading$ = new BehaviorSubject(false);\n    public allTracks$ = new BehaviorSubject<(UploadQueueItem|Track)[]>([]);\n\n    public form = this.fb.group({\n        name: [''],\n        image: [''],\n        artist: [null],\n        release_date: [new Date().toISOString().slice(0, 10)],\n        description: [''],\n        tags: [[]],\n        genres: [[]],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public uploadQueue: UploadQueueService,\n        private albums: Albums,\n        private cd: ChangeDetectorRef,\n        private currentUser: CurrentUser,\n        private modal: Modal,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        public settings: Settings,\n        private search: Search,\n    ) {}\n\n    ngOnInit() {\n        this.allTracks$ = new BehaviorSubject([\n            ...(this.album ? this.album.tracks : []),\n            ...this.onlyValidUploads(this.uploadQueue.uploads$.value),\n        ]);\n        this.uploadQueue.uploadsAdded$.subscribe(uploads => {\n            this.allTracks$.next([\n                ...this.allTracks$.value,\n                ...this.onlyValidUploads(uploads),\n            ]);\n        });\n        if (this.album) {\n            const value = {\n                ...this.album,\n                tags: this.album.tags.map(t => t.name),\n                genres: this.album.genres.map(g => g.display_name || g.name),\n            };\n            this.form.patchValue(value);\n        }\n    }\n\n    private onlyValidUploads(uploads: UploadQueueItem[]) {\n        return uploads.filter(upload => !upload.error$.value);\n    }\n\n    public reorderTracks(e: CdkDragDrop<never>) {\n        const sortedTracks = this.allTracks$.value;\n        moveItemInArray(sortedTracks, e.previousIndex, e.currentIndex);\n        this.allTracks$.next(sortedTracks);\n    }\n\n    public submit() {\n        this.loading$.next(true);\n\n        if (this.trackForms.some(f => f.isUploading())) {\n            this.toast.open('Some tracks are still uploading.');\n            return;\n        }\n\n        const payload = {\n            ...this.form.value,\n            tracks: this.trackForms.map(f => f.getPayload()),\n        };\n\n        // set artist\n        if (payload.artist) {\n            payload.artist_id = payload.artist.id;\n            payload.artist_type = payload.artist.artist_type;\n        } else if (this.artist) {\n            payload.artist_id = this.artist.id;\n            payload.artist_type = this.artist.model_type;\n        } else if (this.settings.get('player.artist_type') === 'user') {\n            payload.artist_id = this.currentUser.get('id');\n            payload.artist_type = USER_MODEL;\n        }\n        delete payload.artist;\n\n        const request = this.album ?\n            this.albums.update(this.album.id, payload) :\n            this.albums.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.form.markAsPristine();\n                this.toast.open('Album saved.');\n                this.uploadQueue.reset();\n                this.saved.emit(response.album);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors = errResponse.errors;\n                scrollInvalidInputIntoView(this.errors, 'track-form');\n                this.cd.markForCheck();\n            });\n    }\n\n    public maybeCancel() {\n        if ( ! this.confirmCancel) {\n            this.canceled.emit();\n            return;\n        }\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Album',\n            body:  'Are you sure you want to cancel all uploads and delete this album?',\n            ok:    'Delete'\n        }).beforeClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.form.reset();\n                this.uploadQueue.reset();\n                this.canceled.emit();\n            }\n        });\n    }\n\n    public uploadFiles(uploadedFiles: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {autoMatch: this.autoMatch, diskPrefix: 'track_media', disk: 'public'},\n            validator: this.audioValidator\n        } as UploadApiConfig;\n        this.uploadQueue.start(uploadedFiles, params).subscribe(() => {\n            //\n        }, () => this.toast.open('Could not upload tracks.'));\n    }\n\n    public trackRemoved(track: UploadQueueItem | Track) {\n        const newTracks = this.allTracks$.value.filter(t => t.id !== track.id);\n        this.allTracks$.next(newTracks);\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem|Track) => upload.id;\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {modelTypes: ['App\\\\Tag'], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    };\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {modelTypes: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, OnDestroy } from '@angular/core';\r\nimport { UploadQueueService } from '../upload-queue/upload-queue.service';\r\nimport { animationFrameScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'upload-progress-bar',\r\n    templateUrl: './upload-progress-bar.component.html',\r\n    styleUrls: ['./upload-progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UploadProgressBarComponent implements OnDestroy {\r\n    @HostBinding('class.hidden') hidden = true;\r\n    private subscription: Subscription;\r\n    public progress: number;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        public uploadQueue: UploadQueueService,\r\n        private cd: ChangeDetectorRef,\r\n    ) {\r\n        this.subscription = this.uploadQueue.totalProgress()\r\n            // material progress bar animation lasts 250ms\r\n            .pipe(throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}))\r\n            .subscribe(progress => {\r\n                this.progress = progress;\r\n                this.hidden = progress === 100 || this.uploadQueue.count$.value.pending === 0;\r\n                this.cd.markForCheck();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","<mat-progress-bar mode=\"determinate\" [value]=\"progress\" color=\"accent\"></mat-progress-bar>\r\n","import {UploadPageComponent} from './upload-page/upload-page.component';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {TrackPageResolver} from '../web-player/tracks/track-page/track-page-resolver.service';\r\nimport {CrupdateTrackPageComponent} from '../admin/tracks/crupdate-track-page/crupdate-track-page.component';\r\nimport {CrupdateAlbumPageComponent} from '../admin/albums/crupdate-album-page/crupdate-album-page.component';\r\nimport {AlbumResolver} from '../web-player/albums/album/album-resolver.service';\r\nimport {PendingChangesGuard} from '@common/guards/pending-changes/pending-changes-guard.service';\r\nimport {UploadingHostComponent} from './uploading-host/uploading-host.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: UploadingHostComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: UploadPageComponent,\r\n                data: {permissions: ['tracks.create', 'albums.create']}\r\n            },\r\n            {\r\n                path: 'tracks/:id/edit',\r\n                component: CrupdateTrackPageComponent,\r\n                resolve: {api: TrackPageResolver},\r\n                canDeactivate: [PendingChangesGuard],\r\n            },\r\n            {\r\n                path: 'albums/:id/edit',\r\n                component: CrupdateAlbumPageComponent,\r\n                resolve: {api: AlbumResolver},\r\n                canDeactivate: [PendingChangesGuard],\r\n                data: {simplified: true},\r\n            },\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UploadingRoutingModule {\r\n}\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'uploading-host',\n  templateUrl: './uploading-host.component.html',\n  styleUrls: ['./uploading-host.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UploadingHostComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UploadPageComponent} from './upload-page/upload-page.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TrackFormComponent} from './track-form/track-form.component';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {AlbumFormComponent} from './album-form/album-form.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {TrackUploadHeaderComponent} from './track-upload-header/track-upload-header.component';\nimport {TrackArtistControlComponent} from './track-form/track-artist-control/track-artist-control.component';\nimport {AlbumControlComponent} from './track-form/album-control/album-control.component';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {UploadedMediaPreviewComponent} from './uploaded-media-preview/uploaded-media-preview.component';\nimport { AlbumArtistControlComponent } from './album-form/album-artist-control/album-artist-control.component';\nimport {UploadingRoutingModule} from './uploading-routing.module';\nimport { UploadingHostComponent } from './uploading-host/uploading-host.component';\nimport {ChipsModule} from '../../common/core/ui/chips/chips.module';\n\n@NgModule({\n    declarations: [\n        UploadPageComponent,\n        TrackFormComponent,\n        AlbumFormComponent,\n        TrackUploadHeaderComponent,\n        TrackArtistControlComponent,\n        AlbumControlComponent,\n        UploadedMediaPreviewComponent,\n        AlbumArtistControlComponent,\n        UploadingHostComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MediaImageModule,\n        UploadingRoutingModule,\n\n        MatIconModule,\n        MatProgressBarModule,\n        TranslationsModule,\n        UploadsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatButtonModule,\n        ChipsModule,\n        MatChipsModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        UploadImageControlModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatMenuModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [\n        TrackFormComponent,\n        AlbumFormComponent,\n    ]\n})\nexport class UploadingModule {\n}\n","import { UploadedFile } from '../uploaded-file';\r\n\r\nexport async function readUploadedFolders(entries: WebKitEntry[]): Promise<UploadedFile[]> {\r\n    let files = [];\r\n\r\n    for (const key in entries) {\r\n        const entry = entries[key];\r\n\r\n        if ( ! entry.isDirectory) {\r\n            files.push(await transformFileEntry(entry as WebKitFileEntry));\r\n        } else {\r\n            files = files.concat(await readDirRecursive(entry as WebKitDirectoryEntry));\r\n        }\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nasync function readDirRecursive(entry: WebKitDirectoryEntry, files = []) {\r\n    const entries = await readEntries(entry);\r\n\r\n    for (const key in entries) {\r\n        const childEntry = entries[key];\r\n\r\n        if (childEntry.isDirectory) {\r\n            await readDirRecursive(childEntry as WebKitDirectoryEntry, files);\r\n        } else {\r\n            files.push(await transformFileEntry(childEntry as WebKitFileEntry));\r\n        }\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nfunction readEntries(dir: WebKitDirectoryEntry): Promise<WebKitEntry[]> {\r\n    return new Promise(resolve => {\r\n        const reader = dir.createReader();\r\n        reader.readEntries(entries => resolve(entries as any));\r\n    });\r\n}\r\n\r\nfunction transformFileEntry(entry: WebKitFileEntry) {\r\n    return new Promise(resolve => {\r\n        entry.file((file: any) => {\r\n            resolve(new UploadedFile(file as File, entry.fullPath));\r\n        });\r\n    });\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { openUploadWindow } from '../utils/open-upload-window';\r\nimport { UploadedFile } from '../uploaded-file';\r\nimport { readUploadedFolders } from '../utils/read-uploaded-folders';\r\nimport { UploadInputConfig } from '@common/uploads/upload-input-config';\r\n\r\n@Directive({\r\n    selector: '[fileDropzone]',\r\n})\r\nexport class UploadDropzoneDirective implements OnInit, OnDestroy {\r\n    @Input() disableDropzoneClick = false;\r\n    @Input() disableDropzone = false;\r\n    @Input() clickButton: ElementRef;\r\n    @Input('fileDropzone') uploadConfig: UploadInputConfig = {};\r\n    @Output() filesDropped: EventEmitter<UploadedFile[]> = new EventEmitter();\r\n\r\n    constructor(protected el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        const el = this.el.nativeElement;\r\n        el.addEventListener('dragenter', (e) => this.handleDragEnter(e));\r\n        el.addEventListener('dragover', (e) => this.handleDragOver(e));\r\n        el.addEventListener('dragleave', (e) => this.handleDragLeave(e));\r\n        el.addEventListener('drop', (e) => this.handleDrop(e));\r\n\r\n        if ( ! this.disableDropzoneClick) {\r\n            const trigger = this.clickButton ? this.clickButton.nativeElement : el;\r\n            trigger.addEventListener('click', () => this.handleClick());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeClassesFromDropzone();\r\n    }\r\n\r\n    protected handleClick() {\r\n        if (this.disableDropzone) return;\r\n        openUploadWindow(this.uploadConfig).then(files => {\r\n            this.emitUploadEvent(files);\r\n        });\r\n    }\r\n\r\n    public handleDragEnter(e) {\r\n        if (this.dropzoneDisabled(e)) return;\r\n        this.el.nativeElement.classList.add('file-over-dropzone');\r\n    }\r\n\r\n    public handleDragOver(e) {\r\n        if (e.preventDefault) e.preventDefault();\r\n        e.dataTransfer.dropEffect = this.dropzoneDisabled(e) ? 'none' : 'move';\r\n        return false;\r\n    }\r\n\r\n    public handleDragLeave(e: MouseEvent) {\r\n        const newEl = document.elementFromPoint(e.clientX, e.clientY);\r\n        if (this.el.nativeElement.contains(newEl)) return;\r\n        this.removeClassesFromDropzone();\r\n    }\r\n\r\n    public async handleDrop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.removeClassesFromDropzone();\r\n        if (this.dropzoneDisabled(e) || !e.dataTransfer.items) return;\r\n\r\n        const items = Array.from(e.dataTransfer.items)\r\n            .filter((item: DataTransferItem) => item.kind === 'file')\r\n            .map((item: DataTransferItem) => {\r\n                return item.webkitGetAsEntry();\r\n            });\r\n\r\n        if (items.length) {\r\n            this.emitUploadEvent(await readUploadedFolders(items));\r\n        }\r\n    }\r\n\r\n    protected emitUploadEvent(files: UploadedFile[]) {\r\n        this.filesDropped.emit(files);\r\n    }\r\n\r\n    protected removeClassesFromDropzone() {\r\n        this.el.nativeElement.classList.remove('file-over-dropzone');\r\n    }\r\n\r\n    protected dropzoneDisabled(e: DragEvent) {\r\n        const hasFiles = e.dataTransfer.types.find(type => type.toLowerCase() === 'files');\r\n        return this.disableDropzone || ! hasFiles;\r\n    }\r\n}\r\n","<div class=\"media-image-container\" [class.show-album-border]=\"!isTrack(media)\">\n    <media-image [media]=\"media\"></media-image>\n    <img class=\"album-border-image\" [src]=\"settings.getAssetUrl('images/album-border.png')\" alt=\"album border image\">\n</div>\n<div class=\"middle-column\">\n    <div class=\"artist-name\">{{isTrack(media) ? media.artists[0].name : media.artist.name}}</div>\n    <div class=\"track-name\">{{media.name}}</div>\n    <div class=\"genre-row\">\n        <mat-chip class=\"track-genre\" *ngIf=\"media.genres.length\">{{media.genres[0].name}}</mat-chip>\n    </div>\n    <div class=\"message\">\n        <span trans>Upload complete.</span> <a [routerLink]=\"mediaLink()\" trans> View now.</a>\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"title\" trans>Share your new {{isTrack(media) ? 'track' : 'album' }}</div>\n    <div class=\"share-icons\">\n        <button mat-icon-button (click)=\"shareUsing('facebook')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/facebook.png')}}\" alt=\"facebook-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('twitter')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/twitter.png')}}\" alt=\"twitter-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('tumblr')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/tumblr.png')}}\" alt=\"tumblr-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('blogger')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/bloggr.png')}}\" alt=\"blogger-icon\">\n        </button>\n    </div>\n    <div class=\"track-link-input input-container\">\n        <label for=\"media-item-link\" class=\"hidden\" trans>Media link</label>\n        <input #trackLinkInput id=\"media-item-link\" type=\"text\" readonly [value]=\"mediaUrl()\" (click)=\"$event.target.select()\">\n    </div>\n</div>\n","import {Component, OnInit, ChangeDetectionStrategy, Input, ViewChild, ElementRef} from '@angular/core';\nimport {Track, TRACK_MODEL} from '../../models/Track';\nimport {ShareableNetworks, shareLinkSocially} from '@common/core/utils/share-link-socially';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../web-player/web-player-urls.service';\nimport {Album} from '../../models/Album';\n\n@Component({\n    selector: 'uploaded-media-preview',\n    templateUrl: './uploaded-media-preview.component.html',\n    styleUrls: ['./uploaded-media-preview.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'material-panel'},\n})\nexport class UploadedMediaPreviewComponent implements OnInit {\n    @ViewChild('trackLinkInput', {static: true}) trackLinkInput: ElementRef<HTMLInputElement>;\n    @Input() media: Track|Album;\n\n    constructor(\n        public settings: Settings,\n        public urls: WebPlayerUrls\n    ) {}\n\n    ngOnInit() {\n        setTimeout(() => {\n            this.trackLinkInput.nativeElement.focus();\n            this.trackLinkInput.nativeElement.select();\n        });\n    }\n\n    public mediaLink() {\n        if (this.isTrack(this.media)) {\n            return this.urls.track(this.media);\n        } else {\n            return this.urls.album(this.media);\n        }\n    }\n\n    public mediaUrl() {\n        return this.urls.routerLinkToUrl(this.mediaLink());\n    }\n\n    public shareUsing(network: ShareableNetworks) {\n        shareLinkSocially(network, this.mediaUrl());\n    }\n\n    public isTrack(media: Track|Album): media is Track {\n        return media.model_type === TRACK_MODEL;\n    }\n}\n","<div class=\"dropzone\" [fileDropzone]=\"uploadConfig\" [clickButton]=\"clickButton\" (filesDropped)=\"uploadTracks($event)\">\r\n    <div class=\"title\" trans>Drag and drop your tracks, videos & albums here.</div>\r\n    <div class=\"action-button\">\r\n        <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-button\" #clickMatButton trans>or choose files to upload</button>\r\n    </div>\r\n    <div class=\"setting-toggle-container\" *ngIf=\"uploadQueue.isEmpty()\">\r\n        <mat-slide-toggle (change)=\"createAlbum$.next($event.checked)\" trans>Create Album</mat-slide-toggle>\r\n        <p trans>Attach all uploaded files to a new album.</p>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"setting-toggle-container create-artists-toggle material-panel\" *ngIf=\"insideAdmin() && currentUser.hasPermission('artists.create')\">\r\n    <mat-slide-toggle (change)=\"autoCreateArtists = $event.checked\" trans>Create Artists</mat-slide-toggle>\r\n    <p trans>Automatically create artists based on track metadata (unless artist already exists).</p>\r\n</div>\r\n\r\n<div class=\"minutes-container\" *ngIf=\"currentUser.getRestrictionValue('tracks.create', 'minutes') as minuteLimit\">\r\n    <span trans>You have {{minuteLimit}} minutes left. Try <a class=\"hover-underline\" routerLink=\"/billing/upgrade\" target=\"_blank\">Pro accounts</a> to get more time and access to advanced features.</span>\r\n</div>\r\n\r\n<div class=\"track-upload-queue\" *ngIf=\"uploadQueue.uploads$ | async as uploads\">\r\n    <ng-container *ngIf=\"uploads.length\">\r\n        <album-form class=\"material-panel\" *ngIf=\"createAlbum$ | async; else createTracks\" [hideArtistControl]=\"!insideAdmin()\" (saved)=\"addSavedMedia($event)\"></album-form>\r\n        <ng-template #createTracks>\r\n            <ng-container *ngIf=\"errors$ | async as errors\">\r\n                <div class=\"track-panel material-panel\" *ngFor=\"let upload of uploads; trackBy: trackByFn\">\r\n                    <track-form [uploadQueueItem]=\"upload\" (saved)=\"addSavedMedia($event)\"></track-form>\r\n                </div>\r\n            </ng-container>\r\n        </ng-template>\r\n    </ng-container>\r\n</div>\r\n\r\n<div class=\"saved-tracks\">\r\n    <uploaded-media-preview [media]=\"media\" *ngFor=\"let media of savedMedia$ | async\"></uploaded-media-preview>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, ElementRef, QueryList, ViewChild, ViewChildren} from '@angular/core';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {Track} from '../../models/Track';\nimport {TrackFormComponent} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {Router} from '@angular/router';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\n\n@Component({\n    selector: 'upload-page',\n    templateUrl: './upload-page.component.html',\n    styleUrls: ['./upload-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class UploadPageComponent {\n    @ViewChild('clickMatButton', {read: ElementRef, static: true}) clickButton: ElementRef<HTMLButtonElement>;\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n    public errors$ = new BehaviorSubject<{[key: string]: {[K in keyof Partial<Track>]: string}}>({});\n    public uploadConfig: UploadInputConfig = {\n        types: [UploadInputTypes.video, UploadInputTypes.audio],\n        multiple: true\n    };\n    public savedMedia$ = new BehaviorSubject<(Track|Album)[]>([]);\n    public createAlbum$ = new BehaviorSubject<boolean>(false);\n    public autoCreateArtists = false;\n\n    constructor(\n        private track: Tracks,\n        public currentUser: CurrentUser,\n        public uploadQueue: UploadQueueService,\n        public settings: Settings,\n        protected tracks: Tracks,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        private router: Router,\n        private waveGenerator: WaveformGenerator,\n    ) {}\n\n    public uploadTracks(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {autoMatch: this.autoCreateArtists, diskPrefix: 'track_media', disk: 'public'},\n            validator: this.audioValidator,\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        this.uploadQueue.start(files, params).subscribe(response => {\n            const queueItem = this.uploadQueue.find(response.queueItemId);\n            this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                queueItem.customData = {waveData};\n                queueItem.finishProcessing();\n            });\n        });\n    }\n\n    public addSavedMedia(newMedia: Track|Album) {\n        this.savedMedia$.next([...this.savedMedia$.value, newMedia]);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem) => upload.id;\n}\n"]}