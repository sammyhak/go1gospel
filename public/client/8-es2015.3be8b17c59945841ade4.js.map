{"version":3,"sources":["webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-upload-validator.ts","webpack:///src/common/uploads/directives/upload-button.directive.ts","webpack:///src/common/uploads/types/upload-uri.enum.ts","webpack:///src/common/core/utils/get-favicon-from-url.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.ts","webpack:///src/common/shared/form-controls/upload-image-control/upload-image-control.component.html","webpack:///src/app/web-player/users/user-profile.service.ts","webpack:///src/app/web-player/users/user-profile-page/edit-user-profile-modal/edit-user-profile-modal.component.html","webpack:///src/app/web-player/users/user-profile-page/edit-user-profile-modal/edit-user-profile-modal.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/base-profile-tab.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-playlists-tab/user-playlists-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-playlists-tab/user-playlists-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/uploaded-tracks-tab/uploaded-tracks-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/uploaded-tracks-tab/uploaded-tracks-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-follows-tab/user-follows-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-follows-tab/user-follows-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-albums-tab/user-albums-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-albums-tab/user-albums-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/tabs/user-reposts-tab/user-reposts-tab.component.html","webpack:///src/app/web-player/users/user-profile-page/tabs/user-reposts-tab/user-reposts-tab.component.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile-page.component.html","webpack:///src/app/web-player/users/user-profile-page/user-profile-page.component.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile-routing.module.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile-page-resolver.service.ts","webpack:///src/app/web-player/users/user-profile-page/user-profile.module.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.ts","webpack:///src/common/uploads/upload-progress-bar/upload-progress-bar.component.html"],"names":["AppearanceImageUploadValidator","DEFAULT_MAX_SIZE_MB","validations","maxSize","this","i18n","types","push","UploadButtonDirective","el","config","filesSelected","nativeElement","addEventListener","e","preventDefault","stopPropagation","then","files","length","emit","UploadUri","Image","getFaviconFromUrl","url","window","location","protocol","host","URL","origin","defaultThrottleConfig","leading","trailing","throttleTime","duration","scheduler","a","source","lift","ThrottleTimeOperator","subscriber","subscribe","Subscriber","destination","super","_hasTrailingValue","_trailingValue","value","throttled","add","schedule","dispatchNext","next","complete","unsubscribe","remove","arg","clearThrottle","UploadImageControlComponent","uploadQueue","imageValidator","uploadsApi","http","fileDeleted","buttonText","compact","uploadInputConfig","multiple","image","src$","fn","propagateChange","start","uploadConfig","defaultUploadConfig","response","fileEntry","params","paths","deleteForever","uri","delete","httpParams","diskPrefix","validator","menuTrigger","toggleMenu","uploadImage","provide","useExisting","multi","UserProfileService","currentUser","id","get","put","userId","contentType","user","cd","post","getModel","followed_users","markForCheck","followedUsers","i","findIndex","curr","splice","find","EditUserProfileModalComponent","fb","dialogRef","profiles","avatarValidator","toast","valueLists","data","loading$","BehaviorSubject","form","group","avatar","username","first_name","last_name","profile","city","country","header_image","description","links","array","countries$","patchValue","forEach","link","addNewLink","countries","valueChanges","pipe","delay","confirm","closeModal","update","finalize","open","close","linkArray","title","index","removeAt","disk","BaseProfileTab","userProfile","zone","pagination$","changes","visible","isLoading","loadMoreItems","scrollContainer","closest","ngOnInit","last_page","current_page","loadMore","page","currentPage","pagination","currentData","UserPlaylistsTabComponent","UploadedTracksTabComponent","tracks","trackDeleteSub","tracksDeleted$","filter","trackIds","newTracks","track","includes","ngOnDestroy","UserFollowsTabComponent","urls","UserAlbumsTabComponent","albums","albumDeleteSub","albumsDeleted$","albumIds","newAlbums","album","UserRepostsTabComponent","UserProfilePageComponent","route","router","settings","users","modal","sanitizer","tabs$","subscriptions","user$","canUploadTracks$","api","canUploadTracks","tabs","setActiveTab","sub","events","event","subscription","header_colors","bypassSecurityTrustStyle","name","activeTab","tab","split","pop","beforeClosed","updatedUser","routes","path","component","resolve","UserProfilePageResolver","state","loading","paramMap","catchError","navigate","mergeMap","of","noReuse","children","UserProfileRoutingModule","forChild","UserProfileModule","UploadProgressBarComponent","hidden","totalProgress","progress","count$","pending"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\r\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\r\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\r\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceImageUploadValidator extends UploadValidator {\r\n    protected readonly DEFAULT_MAX_SIZE_MB = 5;\r\n\r\n    protected initValidations() {\r\n        const validations = [\r\n            new FileSizeValidation(\r\n                {maxSize: convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')},\r\n                this.i18n\r\n            ),\r\n            new FileTypeValidation({types: ['image']}, this.i18n),\r\n        ];\r\n\r\n        this.validations.push(...validations);\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { openUploadWindow } from '../utils/open-upload-window';\r\nimport { UploadInputConfig } from '../upload-input-config';\r\nimport {UploadedFile} from '@common/uploads/uploaded-file';\r\n\r\n@Directive({\r\n    selector: '[uploadButton]'\r\n})\r\nexport class UploadButtonDirective implements OnInit {\r\n    @Input('uploadButton') config: UploadInputConfig = {};\r\n    @Output() filesSelected = new EventEmitter<UploadedFile[]>();\r\n\r\n    constructor(private el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        this.el.nativeElement.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            openUploadWindow(this.config).then(files => {\r\n                if (files && files.length) {\r\n                    this.filesSelected.emit(files);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","export enum UploadUri {\n    Image = 'uploads/images',\n}\n","import {isAbsoluteUrl} from '@common/core/utils/is-absolute-url';\r\n\r\nexport function getFaviconFromUrl(url: string) {\r\n    if ( ! url) {\r\n        return null;\r\n    }\r\n    // relative url to current site\r\n    if ( ! isAbsoluteUrl(url)) {\r\n        url = window.location.protocol + '//' + window.location.host;\r\n    }\r\n    const domain = new URL(url).origin;\r\n    return 'https://www.google.com/s2/favicons?domain=' + domain;\r\n}\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n//# sourceMappingURL=throttle.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import {Component, EventEmitter, HostBinding, Input, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadInputConfig, UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {UploadsApiService} from '@common/uploads/uploads-api.service';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {openUploadWindow} from '../../../uploads/utils/open-upload-window';\nimport {MatMenuTrigger} from '@angular/material/menu';\n\n@Component({\n    selector: 'upload-image-control',\n    templateUrl: './upload-image-control.component.html',\n    styleUrls: ['./upload-image-control.component.scss'],\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: UploadImageControlComponent,\n        multi: true,\n    }]\n})\nexport class UploadImageControlComponent implements ControlValueAccessor {\n    @Output() fileDeleted = new EventEmitter();\n    @ViewChild(MatMenuTrigger) menuTrigger: MatMenuTrigger;\n    @Input() defaultBackground: string;\n    @Input() buttonText = 'Upload image';\n    @Input() uploadConfig: UploadApiConfig;\n    @Input() diskPrefix: string;\n    @Input() @HostBinding('class.compact') compact = false;\n    public uploadInputConfig: UploadInputConfig = {multiple: false, types: [UploadInputTypes.image]};\n    public src$ = new BehaviorSubject<string>(null);\n    private propagateChange: Function;\n\n    constructor(\n        private uploadQueue: UploadQueueService,\n        private imageValidator: AppearanceImageUploadValidator,\n        private uploadsApi: UploadsApiService,\n        private http: AppHttpClient,\n    ) {}\n\n    public writeValue(value: string) {\n        this.src$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public uploadImage(files: UploadedFile[]) {\n        this.uploadQueue.start(files, this.uploadConfig || this.defaultUploadConfig())\n            .subscribe(response => {\n                this.src$.next(response.fileEntry.url);\n                this.propagateChange(response.fileEntry.url);\n            });\n    }\n\n    public deleteUpload() {\n        const params = {paths: [this.src$.value], deleteForever: true};\n        const request = this.uploadConfig && this.uploadConfig.uri ?\n            this.http.delete(this.uploadConfig.uri, params) :\n            this.uploadsApi.delete(params);\n\n        request.subscribe(() => {\n            this.src$.next(null);\n            this.propagateChange(null);\n            this.fileDeleted.emit();\n        });\n    }\n\n    private defaultUploadConfig(): UploadApiConfig {\n        return {\n            httpParams: {diskPrefix: this.diskPrefix || 'common_media'},\n            uri: UploadUri.Image,\n            validator: this.imageValidator,\n        };\n    }\n\n    public openUploadDialog() {\n        if (this.src$.value) {\n            this.menuTrigger.toggleMenu();\n        } else {\n            openUploadWindow(this.uploadInputConfig).then(files => {\n                this.uploadImage(files);\n            });\n        }\n    }\n}\n","<image-or-icon *ngIf=\"src$ | async as src; else defaultBg\" [src]=\"src\" class=\"inherit-size\"></image-or-icon>\r\n<ng-template #defaultBg>\r\n    <image-or-icon *ngIf=\"defaultBackground\" [src]=\"defaultBackground\" class=\"inherit-size\"></image-or-icon>\r\n</ng-template>\r\n<div class=\"action-buttons\">\r\n    <ng-container *ngIf=\"compact\">\r\n        <span [matMenuTriggerFor]=\"menu\"></span>\r\n        <button type=\"button\" mat-icon-button  (click)=\"openUploadDialog()\" class=\"action-button\">\r\n            <mat-icon svgIcon=\"edit\"></mat-icon>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button type=\"button\" mat-menu-item [uploadButton]=\"uploadInputConfig\" (filesSelected)=\"uploadImage($event)\">{{buttonText}}</button>\r\n            <button type=\"button\" mat-menu-item (click)=\"deleteUpload()\" trans>Remove</button>\r\n        </mat-menu>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"!compact\">\r\n        <button type=\"button\" class=\"action-button\" mat-stroked-button color=\"accent\" [uploadButton]=\"uploadInputConfig\" (filesSelected)=\"uploadImage($event)\" trans>{{buttonText}}</button>\r\n        <button type=\"button\" class=\"action-button delete-button\" mat-icon-button *ngIf=\"src$ | async\" (click)=\"deleteUpload()\">\r\n            <mat-icon svgIcon=\"delete\"></mat-icon>\r\n        </button>\r\n    </ng-container>\r\n</div>\r\n<upload-progress-bar></upload-progress-bar>\r\n","import {ChangeDetectorRef, Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {User} from '@common/core/types/models/User';\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\nimport {Track} from '../../models/Track';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\nimport {CurrentUser} from '@common/auth/current-user';\n\nconst BASE_URI = 'user-profile';\n\nexport interface GetProfileResponse {\n    user: User;\n    canUploadTracks: boolean;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserProfileService {\n    constructor(private http: AppHttpClient, private currentUser: CurrentUser) {}\n\n    public get(id: number): BackendResponse<GetProfileResponse> {\n        return this.http.get(`${BASE_URI}/${id}`);\n    }\n\n    public update(id: number, params: object): BackendResponse<{user: User}> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public loadMore<T>(userId: number, contentType: string, params: {page: number}): PaginatedBackendResponse<T> {\n        return this.http.get(`${BASE_URI}/${userId}/load-more/${contentType}`, params);\n    }\n\n    public follow(user: User, cd: ChangeDetectorRef) {\n        this.http.post(`users/${user.id}/follow`).subscribe(() => {\n            this.currentUser.getModel().followed_users.push(user);\n            cd.markForCheck();\n        });\n    }\n\n    public unfollow(user: User, cd: ChangeDetectorRef) {\n        this.http.post(`users/${user.id}/unfollow`).subscribe(() => {\n            const followedUsers = this.currentUser.getModel().followed_users,\n                i = followedUsers.findIndex(curr => curr.id === user.id);\n            followedUsers.splice(i, 1);\n            cd.markForCheck();\n        });\n    }\n\n    public currentUserIsFollowing(user: User): boolean {\n        if ( ! this.currentUser.getModel().followed_users) return false;\n        return !!this.currentUser.getModel().followed_users.find(curr => curr.id === user.id);\n    }\n}\n","<div class=\"modal-header\">\n    <h2 class=\"modal-title\" mat-dialog-title trans>Edit your profile</h2>\n    <button type=\"button\" mat-icon-button (click)=\"close()\" tabindex=\"-1\" class=\"close-button\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\n    <mat-dialog-content>\n        <ng-container formGroupName=\"profile\">\n            <upload-image-control class=\"header-image-control\" buttonText=\"Upload header image\" [uploadConfig]=\"headerImageUploadConfig()\" (fileDeleted)=\"confirm(false)\" formControlName=\"header_image\"></upload-image-control>\n        </ng-container>\n        <div class=\"flex-container\">\n            <ng-container formGroupName=\"user\">\n                <upload-image-control [uploadConfig]=\"avatarUploadConfig()\" buttonText=\"Upload avatar\" formControlName=\"avatar\"></upload-image-control>\n            </ng-container>\n            <div class=\"many-inputs right-column\">\n                <ng-container formGroupName=\"user\">\n                    <div class=\"input-container\">\n                        <label for=\"profile-username\" trans>Username</label>\n                        <input type=\"text\" id=\"profile-username\" formControlName=\"username\" required>\n                    </div>\n\n                    <div class=\"inline-inputs-container many-inputs\">\n                        <div class=\"input-container\">\n                            <label for=\"profile-first_name\" trans>First Name</label>\n                            <input type=\"text\" id=\"profile-first_name\" formControlName=\"first_name\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"profile-last_name\" trans>Last Name</label>\n                            <input type=\"text\" id=\"profile-last_name\" formControlName=\"last_name\">\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container formGroupName=\"profile\">\n                    <div class=\"inline-inputs-container many-inputs\">\n                        <div class=\"input-container\">\n                            <label for=\"profile-city\" trans>City</label>\n                            <input type=\"text\" id=\"profile-city\" formControlName=\"city\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"profile-country\" trans>Country</label>\n                            <select id=\"profile-country\" formControlName=\"country\">\n                                <option [value]=\"country.name\" *ngFor=\"let country of countries$ | async\">{{country.name}}</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div class=\"input-container\">\n                        <label for=\"profile-description\" trans>Description</label>\n                        <textarea type=\"text\" id=\"profile-description\" formControlName=\"description\" rows=\"6\" maxlength=\"250\"></textarea>\n                    </div>\n                </ng-container>\n            </div>\n        </div>\n        <div class=\"links-container\">\n            <div class=\"links-header\">\n                <div class=\"text\" trans>Your Links</div>\n                <button type=\"button\" class=\"add-link-button\" mat-flat-button color=\"accent\" (click)=\"addNewLink()\" trans>Add link</button>\n            </div>\n            <ul formArrayName=\"links\">\n                <li *ngFor=\"let link of linkArray().controls; let index = index\" [formGroupName]=\"index\">\n                    <div class=\"inline-inputs-container inline-link-container many-inputs\">\n                        <div class=\"input-container\">\n                            <label [for]=\"'url-' + index\" trans>Url</label>\n                            <input type=\"url\" [id]=\"'url-' + index\" formControlName=\"url\" required>\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"title\" trans>Short Title</label>\n                            <input type=\"text\" id=\"title\" formControlName=\"title\" required>\n                        </div>\n                        <button type=\"button\" mat-icon-button class=\"remove-link-button\" (click)=\"deleteLink(index)\">\n                            <mat-icon svgIcon=\"delete\"></mat-icon>\n                        </button>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button class=\"cancel-button\" trans>Close</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" class=\"submit-button\" [disabled]=\"loading$ | async\" trans>Save</button>\n    </mat-dialog-actions>\n</form>\n","import {ChangeDetectionStrategy, Component, Inject, Optional} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {User} from '@common/core/types/models/User';\nimport {FormArray, FormBuilder} from '@angular/forms';\nimport {UserProfileService} from '../../user-profile.service';\nimport {BehaviorSubject} from 'rxjs';\nimport {delay, finalize} from 'rxjs/operators';\nimport {UserLink} from '../../../../models/UserLink';\nimport {AvatarValidator} from '@common/account-settings/avatar-validator';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ImageUploadValidator} from '../../../image-upload-validator';\nimport {CountryListItem, ValueLists} from '@common/core/services/value-lists.service';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\n\ninterface EditUserProfileModalData {\n    user: User;\n}\n\n@Component({\n    selector: 'edit-user-profile-modal',\n    templateUrl: './edit-user-profile-modal.component.html',\n    styleUrls: ['./edit-user-profile-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EditUserProfileModalComponent {\n    public loading$ = new BehaviorSubject<boolean>(false);\n\n    public form = this.fb.group({\n        user: this.fb.group({\n            avatar: [''],\n            username: [''],\n            first_name: [''],\n            last_name: [''],\n        }),\n        profile: this.fb.group({\n            city: [''],\n            country: [''],\n            header_image: [''],\n            description: [''],\n        }),\n        links: this.fb.array([]),\n    });\n    public countries$ = new BehaviorSubject<CountryListItem[]>([]);\n\n    constructor(\n        private fb: FormBuilder,\n        private dialogRef: MatDialogRef<EditUserProfileModalComponent>,\n        private profiles: UserProfileService,\n        private avatarValidator: AvatarValidator,\n        private toast: Toast,\n        private imageValidator: ImageUploadValidator,\n        private valueLists: ValueLists,\n        @Optional() @Inject(MAT_DIALOG_DATA) public data: EditUserProfileModalData,\n    ) {\n        this.form.patchValue({\n            user: this.data.user,\n            profile: this.data.user.profile,\n        });\n\n        this.data.user.links.forEach(link => {\n            this.addNewLink(link);\n        });\n\n        this.valueLists.get(['countries']).subscribe(response => {\n            this.countries$.next(response.countries);\n        });\n\n        this.form.get('profile.header_image')\n            .valueChanges\n            .pipe(delay(0)) // wait \"this.form.value\" to update\n            .subscribe(() => {\n                this.confirm(false);\n            });\n    }\n\n    public confirm(closeModal = true) {\n        this.loading$.next(true);\n        this.profiles.update(this.data.user.id, this.form.value)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (closeModal) {\n                    this.toast.open('Profile updated.');\n                    this.close(response.user);\n                }\n            });\n    }\n\n    public close(user?: User) {\n        this.dialogRef.close(user);\n    }\n\n    public linkArray() {\n        return this.form.get('links') as FormArray;\n    }\n\n    public addNewLink(link: Partial<UserLink> = {}) {\n        this.linkArray().push(this.fb.group({url: [link.url || ''], title: [link.title || '']}));\n    }\n\n    public deleteLink(index: number) {\n        this.linkArray().removeAt(index);\n    }\n\n    public avatarUploadConfig(): UploadApiConfig {\n        return {\n            uri: `users/${this.data.user.id}/avatar`,\n            validator: this.avatarValidator,\n        };\n    }\n\n    public headerImageUploadConfig(): UploadApiConfig {\n        return {\n            uri: 'uploads',\n            httpParams: {diskPrefix: 'user_header_media', disk: 'public'},\n            validator: this.imageValidator,\n        };\n    }\n}\n","import { AfterViewInit, ElementRef, HostBinding, Input, NgZone, OnChanges, SimpleChanges, Directive } from '@angular/core';\r\nimport {UserProfileService} from '../../user-profile.service';\r\nimport {User} from '@common/core/types/models/User';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\r\nimport {InfiniteScroll} from '@common/core/ui/infinite-scroll/infinite.scroll';\r\nimport {finalize} from 'rxjs/operators';\r\n\r\n@Directive()\nexport abstract class BaseProfileTab<T> extends InfiniteScroll implements AfterViewInit, OnChanges {\r\n    @Input() user: User;\r\n    @Input() @HostBinding('class.visible') visible: boolean;\r\n    protected abstract contentType: string;\r\n    public pagination$ = new BehaviorSubject<PaginationResponse<T>>(null);\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        protected userProfile: UserProfileService,\r\n        protected el: ElementRef<HTMLElement>,\r\n        protected zone: NgZone,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // initial content load\r\n        if (this.visible && !this.pagination$.value && !this.isLoading()) {\r\n            this.loadMoreItems();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const scrollContainer = this.el.nativeElement.closest('.page-wrapper') as HTMLElement;\r\n        this.el = new ElementRef(scrollContainer);\r\n        super.ngOnInit();\r\n    }\r\n\r\n    protected canLoadMore(): boolean {\r\n        return this.visible && (!this.pagination$.value || (this.pagination$.value.last_page > this.pagination$.value.current_page));\r\n    }\r\n\r\n    protected isLoading(): boolean {\r\n        return this.loading$.value;\r\n    }\r\n\r\n    protected loadMoreItems() {\r\n        this.loading$.next(true);\r\n        this.userProfile.loadMore<T>(this.user.id, this.contentType, {page: this.currentPage() + 1})\r\n            .pipe(finalize(() => this.loading$.next(false)))\r\n            .subscribe(response => {\r\n                this.pagination$.next({\r\n                    ...response.pagination,\r\n                    data: [...this.currentData(), ...response.pagination.data],\r\n                });\r\n            });\r\n    }\r\n\r\n    protected currentPage() {\r\n        return this.pagination$.value ? this.pagination$.value.current_page : 0;\r\n    }\r\n\r\n    protected currentData() {\r\n        return this.pagination$.value ? this.pagination$.value.data : [];\r\n    }\r\n}\r\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <media-grid *ngIf=\"pagination.data.length\" [@fadeIn]=\"visible\">\n        <ng-container *ngFor=\"let playlist of pagination.data\">\n            <playlist-item [playlist]=\"playlist\" *ngIf=\"playlist.public\"></playlist-item>\n        </ng-container>\n    </media-grid>\n\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>Seems like this user has not created any playlists yet.</span>\n    </no-results-message>\n</ng-container>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {Playlist} from '../../../../../models/Playlist';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\n\n@Component({\n    selector: 'user-playlists-tab',\n    templateUrl: './user-playlists-tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserPlaylistsTabComponent extends BaseProfileTab<Playlist> {\n    protected contentType = 'playlists';\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>No tracks yet</span>\n        <span secondary-text><ng-content></ng-content></span>\n    </no-results-message>\n    <div [@fadeIn]=\"visible\">\n        <media-list-item [media]=\"track\" *ngFor=\"let track of pagination.data\" [tracks]=\"pagination.data\"></media-list-item>\n    </div>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>\n","import {Component, ElementRef, Input, NgZone, OnDestroy} from '@angular/core';\nimport {Track} from '../../../../../models/Track';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\nimport {UserProfileService} from '../../../user-profile.service';\nimport {Tracks} from '../../../../tracks/tracks.service';\nimport {Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n@Component({\n    selector: 'uploaded-tracks-tab',\n    templateUrl: './uploaded-tracks-tab.component.html',\n    styleUrls: ['./uploaded-tracks-tab.component.scss'],\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UploadedTracksTabComponent extends BaseProfileTab<Track> implements OnDestroy {\n    @Input() contentType: string;\n    private trackDeleteSub: Subscription;\n\n    constructor(\n        protected userProfile: UserProfileService,\n        protected el: ElementRef<HTMLElement>,\n        protected zone: NgZone,\n        protected tracks: Tracks,\n    ) {\n        super(userProfile, el, zone);\n\n        this.trackDeleteSub = this.tracks.tracksDeleted$\n            .pipe(filter(() => !!this.pagination$.value))\n            .subscribe(trackIds => {\n                const newTracks = this.pagination$.value.data.filter(track => {\n                    return !trackIds.includes(track.id);\n                });\n                this.pagination$.next({\n                    ...this.pagination$.value,\n                    data: newTracks\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.trackDeleteSub.unsubscribe();\n        super.ngOnDestroy();\n    }\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <div class=\"followed-users\" *ngIf=\"pagination.data.length\" [@fadeIn]=\"visible\">\n        <div class=\"follower-row\" *ngFor=\"let followedUser of pagination.data\">\n            <media-image [media]=\"followedUser\"></media-image>\n            <div class=\"meta\">\n                <a class=\"name hover-underline\" [routerLink]=\"urls.user(followedUser)\">{{followedUser['display_name']}}</a>\n                <div class=\"followers\">{{followedUser.followers_count}} <span trans>Followers</span></div>\n            </div>\n            <button mat-stroked-button class=\"follow-button\" (click)=\"profile.follow(followedUser, cd)\" *ngIf=\"!profile.currentUserIsFollowing(followedUser) && ! isCurrentUser(followedUser)\" trans>Follow</button>\n            <button mat-stroked-button class=\"follow-button\" (click)=\"profile.unfollow(followedUser, cd)\" *ngIf=\"profile.currentUserIsFollowing(followedUser) && ! isCurrentUser(followedUser)\" trans>Unfollow</button>\n        </div>\n    </div>\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text><ng-content></ng-content></span>\n    </no-results-message>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, NgZone} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {User} from '@common/core/types/models/User';\nimport {WebPlayerUrls} from '../../../../web-player-urls.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UserProfileService} from '../../../user-profile.service';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\n\n@Component({\n    selector: 'user-follows-tab',\n    templateUrl: './user-follows-tab.component.html',\n    styleUrls: ['./user-follows-tab.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserFollowsTabComponent extends BaseProfileTab<User> {\n    @Input() contentType: string;\n    constructor(\n        public profile: UserProfileService,\n        protected el: ElementRef<HTMLElement>,\n        public urls: WebPlayerUrls,\n        public currentUser: CurrentUser,\n        public cd: ChangeDetectorRef,\n        protected zone: NgZone,\n    ) {\n        super(profile, el, zone);\n    }\n\n    public isCurrentUser(user: User) {\n        return user.id === this.currentUser.get('id');\n    }\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>No albums yet</span>\n        <span secondary-text trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on albums they share in the future.</span>\n    </no-results-message>\n    <div [@fadeIn]=\"visible\">\n        <media-list-item [media]=\"album\" *ngFor=\"let album of pagination.data\"></media-list-item>\n    </div>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    NgZone,\n    OnDestroy\n} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {Album} from '../../../../../models/Album';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\nimport {UserProfileService} from '../../../user-profile.service';\nimport {Tracks} from '../../../../tracks/tracks.service';\nimport {filter} from 'rxjs/operators';\nimport {Albums} from '../../../../albums/albums.service';\nimport {Subscription} from 'rxjs';\n\n@Component({\n    selector: 'user-albums-tab',\n    templateUrl: './user-albums-tab.component.html',\n    styleUrls: ['./user-albums-tab.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserAlbumsTabComponent extends BaseProfileTab<Album> implements OnDestroy {\n    protected contentType = 'albums';\n    private albumDeleteSub: Subscription;\n\n    constructor(\n        protected userProfile: UserProfileService,\n        protected el: ElementRef<HTMLElement>,\n        protected zone: NgZone,\n        protected albums: Albums,\n    ) {\n        super(userProfile, el, zone);\n\n        this.albumDeleteSub = this.albums.albumsDeleted$\n            .pipe(filter(() => !!this.pagination$.value))\n            .subscribe(albumIds => {\n                const newAlbums = this.pagination$.value.data.filter(album => {\n                    return !albumIds.includes(album.id);\n                });\n                this.pagination$.next({\n                    ...this.pagination$.value,\n                    data: newAlbums\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.albumDeleteSub.unsubscribe();\n        super.ngOnDestroy();\n    }\n}\n","<ng-container *ngIf=\"pagination$ | async as pagination\">\n    <no-results-message *ngIf=\"!pagination.data.length\">\n        <span primary-text trans>No reposts yet</span>\n        <span secondary-text trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on reposts they share in the future.</span>\n    </no-results-message>\n    <div [@fadeIn]=\"visible\">\n        <media-list-item [media]=\"repost.repostable\" [reposter]=\"user\" *ngFor=\"let repost of pagination.data\"></media-list-item>\n    </div>\n</ng-container>\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"inline\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BaseProfileTab} from '../base-profile-tab';\nimport {Repost} from '../../../../../models/repost';\nimport {ProfileTabFadeAnimation} from '../profile-tab-fade-animation';\n\n@Component({\n    selector: 'user-reposts-tab',\n    templateUrl: './user-reposts-tab.component.html',\n    styleUrls: ['./user-reposts-tab.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [ProfileTabFadeAnimation],\n})\nexport class UserRepostsTabComponent extends BaseProfileTab<Repost> {\n    protected contentType = 'reposts';\n}\n","<ng-container *ngIf=\"user$ | async as user\">\n    <div class=\"media-page-header\">\n        <div class=\"header-bg\" [style.background-image]=\"getProfileBackground()\"></div>\n        <div class=\"flex-container\">\n            <media-image class=\"header-image\" [media]=\"user\"></media-image>\n            <div class=\"header-content-wrapper\">\n                <div class=\"header-content\">\n                    <h1 class=\"title\">\n                        {{user.display_name}}\n                        <button type=\"button\" class=\"pro-badge\" *ngIf=\"currentUser.isSubscribed()\" mat-icon-button [matTooltip]=\"'Pro member' | trans\">\n                            <mat-icon svgIcon=\"star\"></mat-icon>\n                        </button>\n                    </h1>\n                    <div class=\"subtitle header-subtitle\">\n                        <div class=\"column first-column\">\n                            <div class=\"column-value\">{{user.followers_count}}</div>\n                            <div class=\"column-title\" trans>Followers</div>\n                        </div>\n                        <div class=\"column\">\n                            <div class=\"column-value\">{{user.followed_users_count}}</div>\n                            <div class=\"column-title\" trans>Following</div>\n                        </div>\n                    </div>\n                    <div class=\"action-buttons\" *ngIf=\"user.id !== currentUser.get('id')\">\n                        <button mat-flat-button color=\"accent\" class=\"action-button\" (click)=\"profile.follow(user, cd)\" *ngIf=\"!profile.currentUserIsFollowing(user)\" trans>Follow</button>\n                        <button mat-flat-button color=\"accent\" class=\"action-button\" (click)=\"profile.unfollow(user, cd)\" *ngIf=\"profile.currentUserIsFollowing(user)\" trans>Unfollow</button>\n                    </div>\n                    <div class=\"text-emphasis\" *ngIf=\"user.profile.description\">\n                        <p class=\"description-text\">{{user.profile.description}}</p>\n                    </div>\n                    <div class=\"profile-location\" *ngIf=\"user.profile.city || user.profile.country\">\n                        <span class=\"text-emphasis\">\n                            <span class=\"city\" *ngIf=\"user.profile.city\">{{user.profile.city}}</span>\n                            <span class=\"country\" *ngIf=\"user.profile.country\">, {{user.profile.country}}</span>\n                        </span>\n                    </div>\n                </div>\n                <div class=\"edit-buttons\">\n                    <button type=\"button\" mat-stroked-button *ngIf=\"user.id === currentUser.get('id')\" (click)=\"openEditProfileModal()\">\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\n                        <span trans>Edit</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"nav-links-wrapper\">\n            <div class=\"nav-links\">\n                <a class=\"nav-link\" *ngFor=\"let tab of tabs$ | async\" [routerLink]=\"urls.user(user, tab)\" [class.active]=\"activeTabIs(tab)\" trans>{{tab}}</a>\n            </div>\n            <div class=\"user-links\">\n                <a [href]=\"userLink.url\" target=\"_blank\" mat-icon-button *ngFor=\"let userLink of user.links\" [matTooltip]=\"userLink.title\">\n                    <img class=\"user-link-image\" [src]=\"favicon(userLink.url)\" [alt]=\"userLink.title\">\n                </a>\n            </div>\n        </div>\n    </div>\n\n    <ad-host slot=\"ads.general_top\" class=\"margin-top\"></ad-host>\n\n    <div class=\"tabs\">\n        <ng-container *ngIf=\"canUploadTracks$ | async\">\n            <uploaded-tracks-tab [user]=\"user\" contentType=\"uploadedTracks\" class=\"tab\" [visible]=\"activeTabIs('tracks')\">\n                <span trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on tracks they share in the future.</span>\n            </uploaded-tracks-tab>\n            <user-albums-tab [user]=\"user\" class=\"tab\" [visible]=\"activeTabIs('albums')\"></user-albums-tab>\n        </ng-container>\n        <user-reposts-tab *ngIf=\"settings.get('player.enable_repost')\" [user]=\"user\" class=\"tab\" [visible]=\"activeTabIs('reposts')\"></user-reposts-tab>\n        <user-playlists-tab [user]=\"user\" class=\"tab\" [visible]=\"activeTabIs('playlists')\"></user-playlists-tab>\n        <uploaded-tracks-tab [user]=\"user\" contentType=\"likedTracks\" class=\"tab\" [visible]=\"activeTabIs('likes')\">\n            <span trans [transValues]=\"{displayName: user.display_name}\">Follow :displayName for updates on tracks they like in the future.</span>\n        </uploaded-tracks-tab>\n        <user-follows-tab [user]=\"user\" class=\"tab\" contentType=\"followers\" [visible]=\"activeTabIs('followers')\">\n            <span trans [transValues]=\"{displayName: user.display_name}\">Seems like no one is following :displayName yet.</span>\n        </user-follows-tab>\n        <user-follows-tab [user]=\"user\" class=\"tab\" contentType=\"followedUsers\" [visible]=\"activeTabIs('following')\">\n            <span trans [transValues]=\"{displayName: user.display_name}\">Seems like :displayName is not following anyone yet.</span>\n        </user-follows-tab>\n    </div>\n\n    <ad-host slot=\"ads.general_bottom\" class=\"margin-bottom\"></ad-host>\n</ng-container>\n","import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, NavigationEnd, Router} from '@angular/router';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {WebPlayerUrls} from '../../web-player-urls.service';\r\nimport {BehaviorSubject, Subscription} from 'rxjs';\r\nimport {filter} from 'rxjs/operators';\r\nimport {User} from '@common/core/types/models/User';\r\nimport {CurrentUser} from '@common/auth/current-user';\r\nimport {Users} from '@common/auth/users.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {EditUserProfileModalComponent} from './edit-user-profile-modal/edit-user-profile-modal.component';\r\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {getFaviconFromUrl} from '@common/core/utils/get-favicon-from-url';\r\nimport {UserProfileService} from '../user-profile.service';\r\n\r\n@Component({\r\n    selector: 'user-profile-page',\r\n    templateUrl: './user-profile-page.component.html',\r\n    styleUrls: ['./user-profile-page.component.scss'],\r\n    providers: [UploadQueueService],\r\n})\r\nexport class UserProfilePageComponent implements OnInit, OnDestroy {\r\n    public tabs$ = new BehaviorSubject<string[]>([]);\r\n    private subscriptions: Subscription[] = [];\r\n    public user$ = new BehaviorSubject<User>(null);\r\n    public activeTab: string;\r\n    public canUploadTracks$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        public settings: Settings,\r\n        public urls: WebPlayerUrls,\r\n        protected users: Users,\r\n        public currentUser: CurrentUser,\r\n        public cd: ChangeDetectorRef,\r\n        public profile: UserProfileService,\r\n        protected modal: Modal,\r\n        protected toast: Toast,\r\n        protected sanitizer: DomSanitizer,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(data => {\r\n            this.canUploadTracks$.next(data.api.canUploadTracks);\r\n            this.user$.next(data.api.user);\r\n            const tabs = [];\r\n            if (this.canUploadTracks$.value) {\r\n                tabs.push(...['tracks', 'albums']);\r\n            }\r\n            if (this.settings.get('player.enable_repost')) {\r\n                tabs.push('reposts');\r\n            }\r\n            tabs.push(...['likes', 'playlists', 'following', 'followers']);\r\n            this.tabs$.next(tabs);\r\n            this.setActiveTab(this.router.url);\r\n        });\r\n        const sub = this.router.events\r\n            .pipe(filter(event => event instanceof NavigationEnd))\r\n            .subscribe((event: NavigationEnd) => {\r\n                this.setActiveTab(event.url);\r\n            });\r\n        this.subscriptions.push(sub);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => {\r\n            subscription.unsubscribe();\r\n        });\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    public getProfileBackground() {\r\n        const profile = this.user$.value.profile;\r\n        if (profile.header_colors || profile.header_image) {\r\n            const background = profile.header_image ?\r\n                `url(${profile.header_image})` :\r\n                `linear-gradient(315deg, ${profile.header_colors[0]} 0%, ${profile.header_colors[1]} 100%)`;\r\n            return this.sanitizer.bypassSecurityTrustStyle(background);\r\n        }\r\n    }\r\n\r\n    public activeTabIs(name: string) {\r\n        return this.activeTab === name;\r\n    }\r\n\r\n    public setActiveTab(url: string) {\r\n        const tab = url.split('/').pop();\r\n        this.activeTab = this.tabs$.value.includes(tab) ? tab : this.tabs$.value[0];\r\n    }\r\n\r\n    public openEditProfileModal() {\r\n        this.modal.open(EditUserProfileModalComponent, {user: this.user$.value})\r\n            .beforeClosed()\r\n            .subscribe(updatedUser => {\r\n                if (updatedUser) {\r\n                    this.user$.next({...this.user$.value, ...updatedUser});\r\n                }\r\n            });\r\n    }\r\n\r\n    public favicon(url: string) {\r\n        return getFaviconFromUrl(url);\r\n    }\r\n}\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {EmptyRouteComponent} from '@common/core/ui/empty-route/empty-route.component';\r\nimport {UserProfilePageComponent} from './user-profile-page.component';\r\nimport {UserProfilePageResolver} from './user-profile-page-resolver.service';\r\nimport {NgModule} from '@angular/core';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: ':id/:name',\r\n        component: UserProfilePageComponent,\r\n        resolve: {api: UserProfilePageResolver},\r\n        data: {name: 'user', noReuse: true},\r\n        children: [\r\n            {path: ':tabName', component: EmptyRouteComponent},\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UserProfileRoutingModule {\r\n}","import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {WebPlayerState} from '../../web-player-state.service';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, of} from 'rxjs';\r\nimport {BackendResponse} from '@common/core/types/backend-response';\r\nimport {GetProfileResponse, UserProfileService} from '../user-profile.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserProfilePageResolver implements Resolve<BackendResponse<GetProfileResponse>> {\r\n    constructor(\r\n        private profiles: UserProfileService,\r\n        private router: Router,\r\n        private state: WebPlayerState\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<GetProfileResponse> {\r\n        this.state.loading = true;\r\n        const id = +route.paramMap.get('id');\r\n\r\n        return this.profiles.get(id).pipe(\r\n            catchError(() => {\r\n                this.state.loading = false;\r\n                this.router.navigate(['/']);\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                this.state.loading = false;\r\n                if (response.user) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(['/']);\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UserProfilePageComponent} from './user-profile-page.component';\nimport {EditUserProfileModalComponent} from './edit-user-profile-modal/edit-user-profile-modal.component';\nimport {UploadedTracksTabComponent} from './tabs/uploaded-tracks-tab/uploaded-tracks-tab.component';\nimport {UserAlbumsTabComponent} from './tabs/user-albums-tab/user-albums-tab.component';\nimport {UserPlaylistsTabComponent} from './tabs/user-playlists-tab/user-playlists-tab.component';\nimport {UserRepostsTabComponent} from './tabs/user-reposts-tab/user-reposts-tab.component';\nimport {UserFollowsTabComponent} from './tabs/user-follows-tab/user-follows-tab.component';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {MediaListItemModule} from '../../tracks/media-list-item/media-list-item.module';\nimport {PlayerUiModule} from '../../player-ui.module';\nimport {TrackActionsBarModule} from '../../tracks/track-actions-bar/track-actions-bar.module';\nimport {UserProfileRoutingModule} from './user-profile-routing.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {AdHostModule} from '@common/core/ui/ad-host/ad-host.module';\nimport {NoResultsMessageModule} from '@common/core/ui/no-results-message/no-results-message.module';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n@NgModule({\n    declarations: [\n        UserProfilePageComponent,\n        EditUserProfileModalComponent,\n        UploadedTracksTabComponent,\n        UserAlbumsTabComponent,\n        UserPlaylistsTabComponent,\n        UserRepostsTabComponent,\n        UserFollowsTabComponent,\n    ],\n    imports: [\n        CommonModule,\n        UploadImageControlModule,\n        MediaImageModule,\n        MediaListItemModule,\n        PlayerUiModule,\n        TrackActionsBarModule,\n        RouterModule,\n        UserProfileRoutingModule,\n        TranslationsModule,\n        AdHostModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        // material\n        MatDialogModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n    ],\n})\nexport class UserProfileModule {\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, OnDestroy } from '@angular/core';\r\nimport { UploadQueueService } from '../upload-queue/upload-queue.service';\r\nimport { animationFrameScheduler, Subscription } from 'rxjs';\r\nimport { throttleTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'upload-progress-bar',\r\n    templateUrl: './upload-progress-bar.component.html',\r\n    styleUrls: ['./upload-progress-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UploadProgressBarComponent implements OnDestroy {\r\n    @HostBinding('class.hidden') hidden = true;\r\n    private subscription: Subscription;\r\n    public progress: number;\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        public uploadQueue: UploadQueueService,\r\n        private cd: ChangeDetectorRef,\r\n    ) {\r\n        this.subscription = this.uploadQueue.totalProgress()\r\n            // material progress bar animation lasts 250ms\r\n            .pipe(throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}))\r\n            .subscribe(progress => {\r\n                this.progress = progress;\r\n                this.hidden = progress === 100 || this.uploadQueue.count$.value.pending === 0;\r\n                this.cd.markForCheck();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n}\r\n\r\n","<mat-progress-bar mode=\"determinate\" [value]=\"progress\" color=\"accent\"></mat-progress-bar>\r\n"]}